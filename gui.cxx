// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "gui.h"

void Gui::cb_About_i(Fl_Menu_*, void*) {
  AboutWindow->show();
}
void Gui::cb_About(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void Gui::cb_Preferences_i(Fl_Menu_*, void*) {
  app->read_preferences();
app->update_preferencewindow();
PreferenceWindow->show();
}
void Gui::cb_Preferences(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Preferences_i(o,v);
}

void Gui::cb_Quit_i(Fl_Menu_*, void*) {
  prefs->flush();
exit(1);
}
void Gui::cb_Quit(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void Gui::cb_Commanding_i(Fl_Menu_*, void*) {
  sendCommandsWindow->show();
}
void Gui::cb_Commanding(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Commanding_i(o,v);
}

void Gui::cb_ACTEL_i(Fl_Menu_*, void*) {
  sendParamsWindow->show();
}
void Gui::cb_ACTEL(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_ACTEL_i(o,v);
}

Fl_Menu_Item Gui::menu_menuBar[] = {
 {"FOXSI GSE", 0,  0, 0, 64, FL_NORMAL_LABEL, 1, 14, 0},
 {"About FOXSI GSE", 0,  (Fl_Callback*)Gui::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences...", 0,  (Fl_Callback*)Gui::cb_Preferences, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit FOXSI GSE", 0x400071,  (Fl_Callback*)Gui::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Data file", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read USB Stream", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Tele Stream", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Spec", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Lightcurve", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Window", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Commanding", 0,  (Fl_Callback*)Gui::cb_Commanding, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ACTEL Commanding", 0,  (Fl_Callback*)Gui::cb_ACTEL, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Gui::fileMenu = Gui::menu_menuBar + 5;
Fl_Menu_Item* Gui::readFile = Gui::menu_menuBar + 6;
Fl_Menu_Item* Gui::readUSBStream = Gui::menu_menuBar + 7;
Fl_Menu_Item* Gui::readTeleStream = Gui::menu_menuBar + 8;
Fl_Menu_Item* Gui::WritePicScreen = Gui::menu_menuBar + 9;
Fl_Menu_Item* Gui::WriteLightcurve = Gui::menu_menuBar + 10;
Fl_Menu_Item* Gui::menuProc = Gui::menu_menuBar + 12;

void Gui::cb_Flush_i(Fl_Button*, void*) {
  app->flush_image();
}
void Gui::cb_Flush(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush_i(o,v);
}

void Gui::cb_mainImageMin_slider_i(Fl_Value_Slider*, void*) {
  app->set_lowthreshold();
}
void Gui::cb_mainImageMin_slider(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainImageMin_slider_i(o,v);
}

void Gui::cb_Energy_i(Fl_Menu_*, void*) {
  app->set_energy_histogram();
}
void Gui::cb_Energy(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Energy_i(o,v);
}

Fl_Menu_Item Gui::menu_choice[] = {
 {"Channel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Energy", 0,  (Fl_Callback*)Gui::cb_Energy, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_Flush1_i(Fl_Button*, void*) {
  app->flush_histogram();
}
void Gui::cb_Flush1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush1_i(o,v);
}

void Gui::cb_binsize_counter_i(Fl_Counter*, void*) {
  app->update_binsize();
}
void Gui::cb_binsize_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_binsize_counter_i(o,v);
}

void Gui::cb_reset_i(Fl_Button*, void*) {
  app->reset_read_counter();
}
void Gui::cb_reset(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_reset_i(o,v);
}

void Gui::cb_initializeBut_i(Fl_Light_Button*, void*) {
  app->initialize();
}
void Gui::cb_initializeBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_initializeBut_i(o,v);
}

void Gui::cb_startReadingDataButton_i(Fl_Button*, void*) {
  app->read_preferences();
app->start_reading_data();
}
void Gui::cb_startReadingDataButton(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_startReadingDataButton_i(o,v);
}

void Gui::cb_closeBut_i(Fl_Light_Button*, void*) {
  app->close_data();
}
void Gui::cb_closeBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_closeBut_i(o,v);
}

void Gui::cb_Flush2_i(Fl_Button*, void*) {
  app->flush_timeseries();
}
void Gui::cb_Flush2(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush2_i(o,v);
}

void Gui::cb_timebinsize_counter_i(Fl_Counter*, void*) {
  app->update_timebinsize();
}
void Gui::cb_timebinsize_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_timebinsize_counter_i(o,v);
}

void Gui::cb_lightcurvexmax_counter_i(Fl_Counter*, void*) {
  app->update_lightcurvexmax();
}
void Gui::cb_lightcurvexmax_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_lightcurvexmax_counter_i(o,v);
}

void Gui::cb_sendParamsBut_i(Fl_Button*, void*) {
  app->openSendParamsWindow();
}
void Gui::cb_sendParamsBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sendParamsBut_i(o,v);
}

void Gui::cb_writeFileBut_i(Fl_Light_Button*, void*) {
  app->start_file();
}
void Gui::cb_writeFileBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_writeFileBut_i(o,v);
}

void Gui::cb_stopReadingDataButton_i(Fl_Button*, void*) {
  app->stop_reading_data();
}
void Gui::cb_stopReadingDataButton(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_stopReadingDataButton_i(o,v);
}

void Gui::cb_Clear_i(Fl_Button*, void*) {
  app->clear_console();
}
void Gui::cb_Clear(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

void Gui::cb_setHoldBut_i(Fl_Button*, void*) {
  app->openSetHoldTimeWindow();
}
void Gui::cb_setHoldBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setHoldBut_i(o,v);
}

void Gui::cb_setTrigBut_i(Fl_Button*, void*) {
  app->openSetTrigWindow();
}
void Gui::cb_setTrigBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigBut_i(o,v);
}

void Gui::cb_sendParamsWindow_sendBut_i(Fl_Button*, void*) {
  app->save_settings();
app->send_params();
//sendParamsWindow->hide();
}
void Gui::cb_sendParamsWindow_sendBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sendParamsWindow_sendBut_i(o,v);
}

void Gui::cb_Close_i(Fl_Button*, void*) {
  sendParamsWindow->hide();
}
void Gui::cb_Close(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void Gui::cb_sendParamsWindow_asic_i(Fl_Value_Input*, void*) {
  app->restore_settings();
}
void Gui::cb_sendParamsWindow_asic(Fl_Value_Input* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sendParamsWindow_asic_i(o,v);
}

void Gui::cb_set_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_chan[i]->set();
}
void Gui::cb_set(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_set_i(o,v);
}

void Gui::cb_clear_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_chan[i]->clear();
}
void Gui::cb_clear(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_clear_i(o,v);
}

void Gui::cb_set1_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_test[i]->set();
}
void Gui::cb_set1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_set1_i(o,v);
}

void Gui::cb_clear1_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_test[i]->clear();
}
void Gui::cb_clear1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_clear1_i(o,v);
}

void Gui::cb_setHoldTimeWindow_setBut_i(Fl_Button*, void*) {
  app->send_global_params(0);
}
void Gui::cb_setHoldTimeWindow_setBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setHoldTimeWindow_setBut_i(o,v);
}

void Gui::cb_setHoldTimeWindow_autorunBut_i(Fl_Button*, void*) {
  app->start_auto_run();
}
void Gui::cb_setHoldTimeWindow_autorunBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setHoldTimeWindow_autorunBut_i(o,v);
}

void Gui::cb_Close1_i(Fl_Button*, void*) {
  setHoldTimeWindow->hide();
}
void Gui::cb_Close1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void Gui::cb_Close2_i(Fl_Button*, void*) {
  setTrigWindow->hide();
}
void Gui::cb_Close2(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void Gui::cb_setTrigWindow_setDelay_i(Fl_Button*, void*) {
  app->send_global_params(3);
}
void Gui::cb_setTrigWindow_setDelay(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setDelay_i(o,v);
}

void Gui::cb_setTrigWindow_setTimeout_i(Fl_Button*, void*) {
  app->send_global_params(1);
}
void Gui::cb_setTrigWindow_setTimeout(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setTimeout_i(o,v);
}

void Gui::cb_setTrigWindow_useTimeout_i(Fl_Value_Input*, void*) {
  if(setTrigWindow_useTimeout->value()){
		setTrigWindow_setTimeout->activate();
		setTrigWindow_timeoutTime->activate();
		} else{
		setTrigWindow_setTimeout->deactivate();
		setTrigWindow_timeoutTime->deactivate();
	  };
}
void Gui::cb_setTrigWindow_useTimeout(Fl_Value_Input* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_useTimeout_i(o,v);
}

void Gui::cb_setTrigWindow_setTrigMode_i(Fl_Button*, void*) {
  app->send_global_params(2);
}
void Gui::cb_setTrigWindow_setTrigMode(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setTrigMode_i(o,v);
}

void Gui::cb_Send_i(Fl_Button*, void*) {
  app->send_voltage_command();
}
void Gui::cb_Send(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Send_i(o,v);
}

void Gui::cb_Close3_i(Fl_Button*, void*) {
  sendCommandsWindow->hide();
}
void Gui::cb_Close3(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close3_i(o,v);
}

void Gui::cb_Send1_i(Fl_Button*, void*) {
  app->send_clockset_command();
}
void Gui::cb_Send1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Send1_i(o,v);
}

void Gui::cb_Strobe_i(Fl_Button*, void*) {
  app->send_atten_state(0);
}
void Gui::cb_Strobe(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Strobe_i(o,v);
}

void Gui::cb_Strobe1_i(Fl_Button*, void*) {
  app->send_atten_state(1);
}
void Gui::cb_Strobe1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Strobe1_i(o,v);
}

Fl_Menu_Item Gui::menu_fileTypeChoice[] = {
 {"Text (slow)", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Binary (fast)", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_OK_i(Fl_Button*, void*) {
  app->save_preferences();
PreferenceWindow->hide();
}
void Gui::cb_OK(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void Gui::cb_Cancel_i(Fl_Button*, void*) {
  PreferenceWindow->hide();
}
void Gui::cb_Cancel(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void Gui::cb_Change_i(Fl_Button*, void*) {
  app->set_datafile_dir();
}
void Gui::cb_Change(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Change_i(o,v);
}

Fl_Menu_Item Gui::menu_DataSource_choice[] = {
 {"Simulate", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ACTEL", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Formatter", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Gui::Gui() {
  { mainWindow = new Fl_Double_Window(1252, 686, "FOXSI GSE");
    mainWindow->color((Fl_Color)19);
    mainWindow->user_data((void*)(this));
    { menuBar = new Fl_Menu_Bar(-5, -1, 1255, 25, "menuBar");
      menuBar->box(FL_BORDER_BOX);
      menuBar->color((Fl_Color)29);
      menuBar->menu(menu_menuBar);
    } // Fl_Menu_Bar* menuBar
    { Fl_Group* o = new Fl_Group(15, 282, 555, 404, "Image");
      o->box(FL_THIN_UP_FRAME);
      { mainImageWindow = new mainImage(15, 282, 400, 400, "Image");
        mainImageWindow->box(FL_GTK_UP_BOX);
        mainImageWindow->color(FL_BACKGROUND_COLOR);
        mainImageWindow->selection_color(FL_BACKGROUND_COLOR);
        mainImageWindow->labeltype(FL_NORMAL_LABEL);
        mainImageWindow->labelfont(0);
        mainImageWindow->labelsize(14);
        mainImageWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainImageWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainImageWindow->when(FL_WHEN_RELEASE);
      } // mainImage* mainImageWindow
      { subImageWindow = new subImage(422, 284, 145, 140, "Image Zoom");
        subImageWindow->box(FL_GTK_UP_BOX);
        subImageWindow->color(FL_BACKGROUND_COLOR);
        subImageWindow->selection_color(FL_BACKGROUND_COLOR);
        subImageWindow->labeltype(FL_NORMAL_LABEL);
        subImageWindow->labelfont(0);
        subImageWindow->labelsize(14);
        subImageWindow->labelcolor(FL_FOREGROUND_COLOR);
        subImageWindow->align(Fl_Align(FL_ALIGN_CENTER));
        subImageWindow->when(FL_WHEN_RELEASE);
      } // subImage* subImageWindow
      { pixelNum = new Fl_Output(457, 464, 80, 25, "Pixel");
      } // Fl_Output* pixelNum
      { pixelCounts = new Fl_Output(457, 434, 80, 25, "Cts");
      } // Fl_Output* pixelCounts
      { subImageLockbut = new Fl_Light_Button(432, 494, 105, 25, "Unlock View");
        subImageLockbut->selection_color((Fl_Color)1);
      } // Fl_Light_Button* subImageLockbut
      { Fl_Button* o = new Fl_Button(481, 523, 80, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush);
      } // Fl_Button* o
      { mainImageMin_slider = new Fl_Value_Slider(431, 522, 40, 145, "min:");
        mainImageMin_slider->maximum(1024);
        mainImageMin_slider->step(1);
        mainImageMin_slider->value(1);
        mainImageMin_slider->textsize(14);
        mainImageMin_slider->callback((Fl_Callback*)cb_mainImageMin_slider);
        mainImageMin_slider->align(Fl_Align(290));
      } // Fl_Value_Slider* mainImageMin_slider
      o->end();
    } // Fl_Group* o
    { rateOutput0 = new Fl_Output(730, 45, 50, 25, "Rate [cts/s]");
    } // Fl_Output* rateOutput0
    { rateOutput1 = new Fl_Output(785, 45, 45, 25);
    } // Fl_Output* rateOutput1
    { rateOutput2 = new Fl_Output(835, 45, 45, 25);
    } // Fl_Output* rateOutput2
    { rateOutput3 = new Fl_Output(885, 45, 45, 25);
    } // Fl_Output* rateOutput3
    { rateOutput4 = new Fl_Output(935, 45, 45, 25);
    } // Fl_Output* rateOutput4
    { rateOutput5 = new Fl_Output(985, 45, 45, 25);
    } // Fl_Output* rateOutput5
    { rateOutput6 = new Fl_Output(1035, 45, 45, 25);
    } // Fl_Output* rateOutput6
    { rateOutput7 = new Fl_Output(1085, 45, 45, 25);
    } // Fl_Output* rateOutput7
    { Fl_Group* o = new Fl_Group(480, 150, 255, 55, "Telemetry Info");
      o->box(FL_THIN_UP_FRAME);
      { shutterstateOutput = new Fl_Value_Output(653, 151, 37, 27, "Shutter state");
      } // Fl_Value_Output* shutterstateOutput
      { tempOutput = new Fl_Value_Output(523, 151, 40, 24, "Temp");
      } // Fl_Value_Output* tempOutput
      { HVOutput = new Fl_Value_Output(523, 180, 40, 24, "HV");
      } // Fl_Value_Output* HVOutput
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(605, 436, 505, 243, "Histogram");
      o->box(FL_THIN_UP_FRAME);
      o->color((Fl_Color)41);
      { mainHistogramWindow = new mainHistogram(685, 439, 265, 240, "Histogram");
        mainHistogramWindow->box(FL_GTK_UP_BOX);
        mainHistogramWindow->color(FL_BACKGROUND_COLOR);
        mainHistogramWindow->selection_color(FL_BACKGROUND_COLOR);
        mainHistogramWindow->labeltype(FL_NORMAL_LABEL);
        mainHistogramWindow->labelfont(0);
        mainHistogramWindow->labelsize(14);
        mainHistogramWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainHistogramWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainHistogramWindow->when(FL_WHEN_RELEASE);
      } // mainHistogram* mainHistogramWindow
      { mainHistogramYlabelmid = new Fl_Value_Output(605, 556, 70, 23);
        mainHistogramYlabelmid->box(FL_THIN_UP_BOX);
      } // Fl_Value_Output* mainHistogramYlabelmid
      { mainHistogramYlabelmax = new Fl_Value_Output(605, 436, 70, 23);
        mainHistogramYlabelmax->box(FL_THIN_UP_BOX);
      } // Fl_Value_Output* mainHistogramYlabelmax
      { Fl_Choice* o = new Fl_Choice(1025, 544, 85, 25, "choice:");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_choice);
      } // Fl_Choice* o
      { histLow = new Fl_Value_Output(1055, 505, 55, 24, "low threshold:");
      } // Fl_Value_Output* histLow
      { histCounts = new Fl_Value_Output(1055, 475, 55, 24, "Counts:");
      } // Fl_Value_Output* histCounts
      { histEnergy = new Fl_Value_Output(1055, 445, 55, 24, "Chan/Energy:");
      } // Fl_Value_Output* histEnergy
      { Fl_Button* o = new Fl_Button(1030, 584, 80, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush1);
      } // Fl_Button* o
      { binsize_counter = new Fl_Counter(990, 624, 120, 20, "bin size:");
        binsize_counter->minimum(1);
        binsize_counter->step(1);
        binsize_counter->value(25);
        binsize_counter->callback((Fl_Callback*)cb_binsize_counter);
      } // Fl_Counter* binsize_counter
      o->end();
    } // Fl_Group* o
    { frameTime = new Fl_Value_Output(535, 36, 65, 24, "frame time");
    } // Fl_Value_Output* frameTime
    { framenumOutput = new Fl_Value_Output(400, 36, 55, 24, "Frame #:");
    } // Fl_Value_Output* framenumOutput
    { Fl_Button* o = new Fl_Button(400, 65, 55, 25, "reset");
      o->callback((Fl_Callback*)cb_reset);
    } // Fl_Button* o
    { initializeBut = new Fl_Light_Button(10, 35, 80, 25, "Initialize");
      initializeBut->box(FL_THIN_UP_BOX);
      initializeBut->callback((Fl_Callback*)cb_initializeBut);
    } // Fl_Light_Button* initializeBut
    { startReadingDataButton = new Fl_Button(95, 35, 60, 25, "Start");
      startReadingDataButton->callback((Fl_Callback*)cb_startReadingDataButton);
      startReadingDataButton->deactivate();
    } // Fl_Button* startReadingDataButton
    { closeBut = new Fl_Light_Button(10, 65, 80, 25, "Close");
      closeBut->callback((Fl_Callback*)cb_closeBut);
      closeBut->deactivate();
    } // Fl_Light_Button* closeBut
    { Fl_Group* o = new Fl_Group(805, 110, 437, 145, "LightCurve");
      o->box(FL_THIN_UP_FRAME);
      { mainLightcurveWindow = new mainLightcurve(805, 110, 300, 145, "Light curve");
        mainLightcurveWindow->box(FL_GTK_UP_BOX);
        mainLightcurveWindow->color(FL_BACKGROUND_COLOR);
        mainLightcurveWindow->selection_color(FL_BACKGROUND_COLOR);
        mainLightcurveWindow->labeltype(FL_NORMAL_LABEL);
        mainLightcurveWindow->labelfont(0);
        mainLightcurveWindow->labelsize(14);
        mainLightcurveWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainLightcurveWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainLightcurveWindow->when(FL_WHEN_RELEASE);
      } // mainLightcurve* mainLightcurveWindow
      { Fl_Button* o = new Fl_Button(1155, 143, 75, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush2);
      } // Fl_Button* o
      { ctsOutput = new Fl_Value_Output(1155, 115, 77, 24, "cts/s:");
      } // Fl_Value_Output* ctsOutput
      { timebinsize_counter = new Fl_Counter(1110, 172, 120, 20, "bin size (s):");
        timebinsize_counter->minimum(0.1);
        timebinsize_counter->value(1);
        timebinsize_counter->callback((Fl_Callback*)cb_timebinsize_counter);
      } // Fl_Counter* timebinsize_counter
      { lightcurvexmax_counter = new Fl_Counter(1110, 212, 120, 20, "total sec:");
        lightcurvexmax_counter->minimum(1);
        lightcurvexmax_counter->step(1);
        lightcurvexmax_counter->value(20);
        lightcurvexmax_counter->callback((Fl_Callback*)cb_lightcurvexmax_counter);
      } // Fl_Counter* lightcurvexmax_counter
      o->end();
    } // Fl_Group* o
    { glitchBut = new Fl_Light_Button(275, 155, 75, 25, "Glitch");
    } // Fl_Light_Button* glitchBut
    { sendParamsBut = new Fl_Button(10, 155, 100, 25, "Send Params");
      sendParamsBut->callback((Fl_Callback*)cb_sendParamsBut);
    } // Fl_Button* sendParamsBut
    { nEvents = new Fl_Value_Input(295, 35, 40, 24, "events");
    } // Fl_Value_Input* nEvents
    { writeFileBut = new Fl_Light_Button(10, 95, 95, 25, "Write to file");
      writeFileBut->callback((Fl_Callback*)cb_writeFileBut);
    } // Fl_Light_Button* writeFileBut
    { stopReadingDataButton = new Fl_Button(160, 35, 75, 25, "Stop");
      stopReadingDataButton->labelcolor((Fl_Color)1);
      stopReadingDataButton->callback((Fl_Callback*)cb_stopReadingDataButton);
      stopReadingDataButton->deactivate();
    } // Fl_Button* stopReadingDataButton
    { Fl_Group* o = new Fl_Group(605, 286, 600, 130, "Console");
      o->box(FL_THIN_UP_FRAME);
      { consoleBuf = new Fl_Text_Display(605, 286, 520, 130);
      } // Fl_Text_Display* consoleBuf
      { Fl_Button* o = new Fl_Button(1130, 286, 75, 25, "Clear");
        o->callback((Fl_Callback*)cb_Clear);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { setHoldBut = new Fl_Button(10, 190, 100, 25, "Set Hold Time");
      setHoldBut->callback((Fl_Callback*)cb_setHoldBut);
    } // Fl_Button* setHoldBut
    { setTrigBut = new Fl_Button(115, 155, 125, 25, "Set Trigger Options");
      setTrigBut->callback((Fl_Callback*)cb_setTrigBut);
    } // Fl_Button* setTrigBut
    { nEventsDone = new Fl_Value_Output(295, 66, 40, 24, "read counter:");
    } // Fl_Value_Output* nEventsDone
    { detector_choice = new Fl_Group(155, 215, 220, 30, "Detectors to display");
      detector_choice->box(FL_DOWN_BOX);
      detector_choice->align(Fl_Align(FL_ALIGN_LEFT));
      detector_choice->deactivate();
      { detector1_checkbox = new Fl_Check_Button(160, 215, 35, 30, "1");
        detector1_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector1_checkbox
      { detector2_checkbox = new Fl_Check_Button(190, 215, 35, 30, "2");
        detector2_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector2_checkbox
      { detector3_checkbox = new Fl_Check_Button(220, 215, 35, 30, "3");
        detector3_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector3_checkbox
      { detector4_checkbox = new Fl_Check_Button(250, 215, 35, 30, "4");
        detector4_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector4_checkbox
      { detector5_checkbox = new Fl_Check_Button(280, 215, 35, 30, "5");
        detector5_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector5_checkbox
      { detector6_checkbox = new Fl_Check_Button(310, 215, 35, 30, "6");
        detector6_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector6_checkbox
      { detector7_checkbox = new Fl_Check_Button(340, 215, 35, 30, "7");
        detector7_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* detector7_checkbox
      detector_choice->end();
    } // Fl_Group* detector_choice
    { inttimeOutput = new Fl_Value_Output(535, 66, 65, 24, "time (s):");
    } // Fl_Value_Output* inttimeOutput
    mainWindow->end();
    mainWindow->resizable(mainWindow);
  } // Fl_Double_Window* mainWindow
  { sendParamsWindow = new Fl_Double_Window(1053, 524, "Send Parameters");
    sendParamsWindow->user_data((void*)(this));
    { sendParamsWindow_sendBut = new Fl_Button(415, 425, 70, 25, "Send");
      sendParamsWindow_sendBut->value(1);
      sendParamsWindow_sendBut->callback((Fl_Callback*)cb_sendParamsWindow_sendBut);
    } // Fl_Button* sendParamsWindow_sendBut
    { sendParamsWindow_value[0] = new Fl_Value_Input(135, 11, 40, 24, "Vfss_neg:");
      sendParamsWindow_value[0]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[0]
    { sendParamsWindow_value[1] = new Fl_Value_Input(135, 38, 40, 24, "Tp_longb:");
      sendParamsWindow_value[1]->maximum(7);
      sendParamsWindow_value[1]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[1]
    { Fl_Button* o = new Fl_Button(415, 460, 70, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { sendParamsWindow_value[2] = new Fl_Value_Input(135, 65, 40, 23, "Sbi_hp1:");
      sendParamsWindow_value[2]->maximum(7);
      sendParamsWindow_value[2]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[2]
    { sendParamsWindow_value[3] = new Fl_Value_Input(135, 92, 40, 23, "Sbi_hp2b:");
      sendParamsWindow_value[3]->maximum(7);
      sendParamsWindow_value[3]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[3]
    { sendParamsWindow_value[4] = new Fl_Value_Input(135, 118, 40, 24, "Iramp_fb:");
      sendParamsWindow_value[4]->maximum(7);
      sendParamsWindow_value[4]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[4]
    { sendParamsWindow_value[5] = new Fl_Value_Input(135, 146, 40, 24, "Iramp_f2:");
      sendParamsWindow_value[5]->maximum(7);
      sendParamsWindow_value[5]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[5]
    { sendParamsWindow_value[6] = new Fl_Value_Input(135, 173, 40, 24, "CM_thr_dis:");
      sendParamsWindow_value[6]->maximum(7);
      sendParamsWindow_value[6]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[6]
    { sendParamsWindow_value[7] = new Fl_Value_Input(135, 201, 40, 24, "RO_all:");
      sendParamsWindow_value[7]->maximum(7);
      sendParamsWindow_value[7]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[7]
    { sendParamsWindow_value[8] = new Fl_Value_Input(135, 228, 40, 24, "Ck_en:");
      sendParamsWindow_value[8]->maximum(7);
      sendParamsWindow_value[8]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[8]
    { sendParamsWindow_value[9] = new Fl_Value_Input(135, 256, 40, 24, "Prebi_hp:");
      sendParamsWindow_value[9]->maximum(7);
      sendParamsWindow_value[9]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[9]
    { sendParamsWindow_value[10] = new Fl_Value_Input(135, 284, 40, 24, "Cal_gen_on:");
      sendParamsWindow_value[10]->maximum(7);
      sendParamsWindow_value[10]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[10]
    { sendParamsWindow_value[11] = new Fl_Value_Input(135, 311, 40, 24, "Slew_on_b:");
      sendParamsWindow_value[11]->maximum(7);
      sendParamsWindow_value[11]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[11]
    { sendParamsWindow_value[12] = new Fl_Value_Input(135, 338, 40, 24, "Nside:");
      sendParamsWindow_value[12]->maximum(7);
      sendParamsWindow_value[12]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[12]
    { sendParamsWindow_value[13] = new Fl_Value_Input(135, 365, 40, 24, "CC_on:");
      sendParamsWindow_value[13]->maximum(7);
      sendParamsWindow_value[13]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[13]
    { sendParamsWindow_value[14] = new Fl_Value_Input(135, 392, 40, 24, "Test_on:");
      sendParamsWindow_value[14]->maximum(7);
      sendParamsWindow_value[14]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[14]
    { sendParamsWindow_value[15] = new Fl_Value_Input(135, 420, 40, 24, "Low_gain:");
      sendParamsWindow_value[15]->maximum(7);
      sendParamsWindow_value[15]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[15]
    { sendParamsWindow_value[16] = new Fl_Value_Input(290, 13, 40, 24, "negQ:");
      sendParamsWindow_value[16]->maximum(7);
      sendParamsWindow_value[16]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[16]
    { sendParamsWindow_value[17] = new Fl_Value_Input(290, 40, 40, 24, "Reserved");
      sendParamsWindow_value[17]->maximum(7);
      sendParamsWindow_value[17]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[17]
    { sendParamsWindow_value[18] = new Fl_Value_Input(290, 67, 40, 24, "ADC_on_b:");
      sendParamsWindow_value[18]->maximum(7);
      sendParamsWindow_value[18]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[18]
    { sendParamsWindow_value[19] = new Fl_Value_Input(290, 95, 40, 24, "VA_RO:");
      sendParamsWindow_value[19]->maximum(7);
      sendParamsWindow_value[19]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[19]
    { sendParamsWindow_value[20] = new Fl_Value_Input(290, 120, 40, 24, "Vrc_negQ:");
      sendParamsWindow_value[20]->maximum(7);
      sendParamsWindow_value[20]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[20]
    { sendParamsWindow_value[21] = new Fl_Value_Input(290, 147, 40, 24, "Ileak_offset:");
      sendParamsWindow_value[21]->maximum(7);
      sendParamsWindow_value[21]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[21]
    { sendParamsWindow_value[22] = new Fl_Value_Input(290, 174, 40, 24, "ADC_test1:");
      sendParamsWindow_value[22]->maximum(7);
      sendParamsWindow_value[22]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[22]
    { sendParamsWindow_value[23] = new Fl_Value_Input(290, 201, 40, 24, "ADC_test2:");
      sendParamsWindow_value[23]->maximum(7);
      sendParamsWindow_value[23]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[23]
    { sendParamsWindow_value[24] = new Fl_Value_Input(290, 229, 40, 24, "Delay, dummy:");
      sendParamsWindow_value[24]->maximum(63);
      sendParamsWindow_value[24]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[24]
    { sendParamsWindow_value[25] = new Fl_Value_Input(290, 257, 40, 24, "Digital threshold:");
      sendParamsWindow_value[25]->maximum(255);
      sendParamsWindow_value[25]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[25]
    { sendParamsWindow_value[26] = new Fl_Value_Input(290, 284, 40, 24, "Shabi_lg:");
      sendParamsWindow_value[26]->maximum(7);
      sendParamsWindow_value[26]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[26]
    { sendParamsWindow_value[27] = new Fl_Value_Input(290, 311, 40, 24, "Pos_Il_1:");
      sendParamsWindow_value[27]->maximum(7);
      sendParamsWindow_value[27]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[27]
    { sendParamsWindow_value[28] = new Fl_Value_Input(290, 338, 40, 24, "Pos_Il_2:");
      sendParamsWindow_value[28]->maximum(7);
      sendParamsWindow_value[28]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[28]
    { sendParamsWindow_value[29] = new Fl_Value_Input(290, 366, 40, 24, "Bias DAC, vthr:");
      sendParamsWindow_value[29]->maximum(31);
      sendParamsWindow_value[29]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[29]
    { sendParamsWindow_value[30] = new Fl_Value_Input(290, 394, 40, 24, "Bias DAC, ifp:");
      sendParamsWindow_value[30]->maximum(31);
      sendParamsWindow_value[30]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[30]
    { sendParamsWindow_value[31] = new Fl_Value_Input(290, 421, 40, 24, "Bias DAC, Iramp:");
      sendParamsWindow_value[31]->maximum(31);
      sendParamsWindow_value[31]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[31]
    { sendParamsWindow_value[32] = new Fl_Value_Input(480, 14, 40, 24, "Bias DAC, ck_bi:");
      sendParamsWindow_value[32]->maximum(31);
      sendParamsWindow_value[32]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[32]
    { sendParamsWindow_value[33] = new Fl_Value_Input(480, 41, 40, 24, "Bias DAC, cal_bi:");
      sendParamsWindow_value[33]->maximum(31);
      sendParamsWindow_value[33]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[33]
    { sendParamsWindow_value[34] = new Fl_Value_Input(480, 68, 40, 24, "Bias DAC, twbi:");
      sendParamsWindow_value[34]->maximum(31);
      sendParamsWindow_value[34]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[34]
    { sendParamsWindow_value[35] = new Fl_Value_Input(480, 96, 40, 24, "Bias DAC, sha_bias:");
      sendParamsWindow_value[35]->maximum(31);
      sendParamsWindow_value[35]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[35]
    { sendParamsWindow_value[36] = new Fl_Value_Input(480, 123, 40, 24, "Bias DAC, ifss:");
      sendParamsWindow_value[36]->maximum(31);
      sendParamsWindow_value[36]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[36]
    { sendParamsWindow_value[37] = new Fl_Value_Input(480, 150, 40, 24, "Bias DAC, ifsf:");
      sendParamsWindow_value[37]->maximum(31);
      sendParamsWindow_value[37]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[37]
    { sendParamsWindow_value[38] = new Fl_Value_Input(480, 177, 40, 24, "Bias DAC, vrc:");
      sendParamsWindow_value[38]->maximum(31);
      sendParamsWindow_value[38]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[38]
    { sendParamsWindow_value[39] = new Fl_Value_Input(480, 205, 40, 24, "Bias DAC, sbi:");
      sendParamsWindow_value[39]->maximum(31);
      sendParamsWindow_value[39]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[39]
    { sendParamsWindow_value[40] = new Fl_Value_Input(480, 232, 40, 24, "Bias DAC, pre_bias:");
      sendParamsWindow_value[40]->maximum(31);
      sendParamsWindow_value[40]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[40]
    { sendParamsWindow_value[41] = new Fl_Value_Input(480, 260, 40, 24, "Bias DAC, ibuf:");
      sendParamsWindow_value[41]->maximum(31);
      sendParamsWindow_value[41]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[41]
    { sendParamsWindow_value[42] = new Fl_Value_Input(480, 287, 40, 24, "Bias DAC, obi:");
      sendParamsWindow_value[42]->maximum(31);
      sendParamsWindow_value[42]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[42]
    { sendParamsWindow_value[43] = new Fl_Value_Input(480, 314, 40, 24, "Bias DAC, Ioffset:");
      sendParamsWindow_value[43]->maximum(31);
      sendParamsWindow_value[43]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[43]
    { sendParamsWindow_value[44] = new Fl_Value_Input(480, 341, 40, 24, "Bias DAC, disc3_bi:");
      sendParamsWindow_value[44]->maximum(31);
      sendParamsWindow_value[44]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[44]
    { sendParamsWindow_chan[0] = new Fl_Light_Button(555, 35, 67, 20, "0");
    } // Fl_Light_Button* sendParamsWindow_chan[0]
    { sendParamsWindow_chan[1] = new Fl_Light_Button(555, 55, 67, 20, "1");
    } // Fl_Light_Button* sendParamsWindow_chan[1]
    { sendParamsWindow_chan[2] = new Fl_Light_Button(555, 75, 67, 20, "2");
    } // Fl_Light_Button* sendParamsWindow_chan[2]
    { sendParamsWindow_chan[3] = new Fl_Light_Button(555, 95, 67, 20, "3");
    } // Fl_Light_Button* sendParamsWindow_chan[3]
    { sendParamsWindow_chan[4] = new Fl_Light_Button(555, 115, 67, 20, "4");
    } // Fl_Light_Button* sendParamsWindow_chan[4]
    { sendParamsWindow_chan[5] = new Fl_Light_Button(555, 135, 67, 20, "5");
    } // Fl_Light_Button* sendParamsWindow_chan[5]
    { sendParamsWindow_chan[6] = new Fl_Light_Button(555, 155, 67, 20, "6");
    } // Fl_Light_Button* sendParamsWindow_chan[6]
    { sendParamsWindow_chan[7] = new Fl_Light_Button(555, 175, 67, 20, "7");
    } // Fl_Light_Button* sendParamsWindow_chan[7]
    { sendParamsWindow_chan[8] = new Fl_Light_Button(555, 195, 67, 20, "8");
    } // Fl_Light_Button* sendParamsWindow_chan[8]
    { sendParamsWindow_chan[9] = new Fl_Light_Button(555, 215, 67, 20, "9");
    } // Fl_Light_Button* sendParamsWindow_chan[9]
    { sendParamsWindow_chan[10] = new Fl_Light_Button(555, 235, 67, 20, "10");
    } // Fl_Light_Button* sendParamsWindow_chan[10]
    { sendParamsWindow_chan[11] = new Fl_Light_Button(555, 255, 67, 20, "11");
    } // Fl_Light_Button* sendParamsWindow_chan[11]
    { sendParamsWindow_chan[12] = new Fl_Light_Button(555, 275, 67, 20, "12");
    } // Fl_Light_Button* sendParamsWindow_chan[12]
    { sendParamsWindow_chan[13] = new Fl_Light_Button(555, 295, 67, 20, "13");
    } // Fl_Light_Button* sendParamsWindow_chan[13]
    { sendParamsWindow_chan[14] = new Fl_Light_Button(555, 315, 67, 20, "14");
    } // Fl_Light_Button* sendParamsWindow_chan[14]
    { sendParamsWindow_chan[15] = new Fl_Light_Button(555, 335, 67, 20, "15");
    } // Fl_Light_Button* sendParamsWindow_chan[15]
    { sendParamsWindow_chan[16] = new Fl_Light_Button(555, 355, 67, 20, "16");
    } // Fl_Light_Button* sendParamsWindow_chan[16]
    { sendParamsWindow_chan[17] = new Fl_Light_Button(555, 375, 67, 20, "17");
    } // Fl_Light_Button* sendParamsWindow_chan[17]
    { sendParamsWindow_chan[18] = new Fl_Light_Button(555, 395, 67, 20, "18");
    } // Fl_Light_Button* sendParamsWindow_chan[18]
    { sendParamsWindow_chan[19] = new Fl_Light_Button(555, 415, 67, 20, "19");
    } // Fl_Light_Button* sendParamsWindow_chan[19]
    { sendParamsWindow_chan[20] = new Fl_Light_Button(555, 435, 67, 20, "20");
    } // Fl_Light_Button* sendParamsWindow_chan[20]
    { sendParamsWindow_chan[21] = new Fl_Light_Button(620, 35, 67, 20, "21");
    } // Fl_Light_Button* sendParamsWindow_chan[21]
    { sendParamsWindow_chan[22] = new Fl_Light_Button(620, 55, 67, 20, "22");
    } // Fl_Light_Button* sendParamsWindow_chan[22]
    { sendParamsWindow_chan[23] = new Fl_Light_Button(620, 75, 67, 20, "23");
    } // Fl_Light_Button* sendParamsWindow_chan[23]
    { sendParamsWindow_chan[24] = new Fl_Light_Button(620, 95, 67, 20, "24");
    } // Fl_Light_Button* sendParamsWindow_chan[24]
    { sendParamsWindow_chan[25] = new Fl_Light_Button(620, 115, 67, 20, "25");
    } // Fl_Light_Button* sendParamsWindow_chan[25]
    { sendParamsWindow_chan[26] = new Fl_Light_Button(620, 135, 67, 20, "26");
    } // Fl_Light_Button* sendParamsWindow_chan[26]
    { sendParamsWindow_chan[27] = new Fl_Light_Button(620, 155, 67, 20, "27");
    } // Fl_Light_Button* sendParamsWindow_chan[27]
    { sendParamsWindow_chan[28] = new Fl_Light_Button(620, 175, 67, 20, "28");
    } // Fl_Light_Button* sendParamsWindow_chan[28]
    { sendParamsWindow_chan[29] = new Fl_Light_Button(620, 195, 67, 20, "29");
    } // Fl_Light_Button* sendParamsWindow_chan[29]
    { sendParamsWindow_chan[30] = new Fl_Light_Button(620, 215, 67, 20, "30");
    } // Fl_Light_Button* sendParamsWindow_chan[30]
    { sendParamsWindow_chan[31] = new Fl_Light_Button(620, 235, 67, 20, "31");
    } // Fl_Light_Button* sendParamsWindow_chan[31]
    { sendParamsWindow_chan[32] = new Fl_Light_Button(620, 255, 67, 20, "32");
    } // Fl_Light_Button* sendParamsWindow_chan[32]
    { sendParamsWindow_chan[33] = new Fl_Light_Button(620, 275, 67, 20, "33");
    } // Fl_Light_Button* sendParamsWindow_chan[33]
    { sendParamsWindow_chan[34] = new Fl_Light_Button(620, 295, 67, 20, "34");
    } // Fl_Light_Button* sendParamsWindow_chan[34]
    { sendParamsWindow_chan[35] = new Fl_Light_Button(620, 315, 67, 20, "35");
    } // Fl_Light_Button* sendParamsWindow_chan[35]
    { sendParamsWindow_chan[36] = new Fl_Light_Button(620, 335, 67, 20, "36");
    } // Fl_Light_Button* sendParamsWindow_chan[36]
    { sendParamsWindow_chan[37] = new Fl_Light_Button(620, 355, 67, 20, "37");
    } // Fl_Light_Button* sendParamsWindow_chan[37]
    { sendParamsWindow_chan[38] = new Fl_Light_Button(620, 375, 67, 20, "38");
    } // Fl_Light_Button* sendParamsWindow_chan[38]
    { sendParamsWindow_chan[39] = new Fl_Light_Button(620, 395, 67, 20, "39");
    } // Fl_Light_Button* sendParamsWindow_chan[39]
    { sendParamsWindow_chan[40] = new Fl_Light_Button(620, 415, 67, 20, "40");
    } // Fl_Light_Button* sendParamsWindow_chan[40]
    { sendParamsWindow_chan[41] = new Fl_Light_Button(620, 435, 67, 20, "41");
    } // Fl_Light_Button* sendParamsWindow_chan[41]
    { sendParamsWindow_chan[42] = new Fl_Light_Button(685, 35, 67, 20, "42");
    } // Fl_Light_Button* sendParamsWindow_chan[42]
    { sendParamsWindow_chan[43] = new Fl_Light_Button(685, 55, 67, 20, "43");
    } // Fl_Light_Button* sendParamsWindow_chan[43]
    { sendParamsWindow_chan[44] = new Fl_Light_Button(685, 75, 67, 20, "44");
    } // Fl_Light_Button* sendParamsWindow_chan[44]
    { sendParamsWindow_chan[45] = new Fl_Light_Button(685, 95, 67, 20, "45");
    } // Fl_Light_Button* sendParamsWindow_chan[45]
    { sendParamsWindow_chan[46] = new Fl_Light_Button(685, 115, 67, 20, "46");
    } // Fl_Light_Button* sendParamsWindow_chan[46]
    { sendParamsWindow_chan[47] = new Fl_Light_Button(685, 135, 67, 20, "47");
    } // Fl_Light_Button* sendParamsWindow_chan[47]
    { sendParamsWindow_chan[48] = new Fl_Light_Button(685, 155, 67, 20, "48");
    } // Fl_Light_Button* sendParamsWindow_chan[48]
    { sendParamsWindow_chan[49] = new Fl_Light_Button(685, 175, 67, 20, "49");
    } // Fl_Light_Button* sendParamsWindow_chan[49]
    { sendParamsWindow_chan[50] = new Fl_Light_Button(685, 195, 67, 20, "50");
    } // Fl_Light_Button* sendParamsWindow_chan[50]
    { sendParamsWindow_chan[51] = new Fl_Light_Button(685, 215, 67, 20, "51");
    } // Fl_Light_Button* sendParamsWindow_chan[51]
    { sendParamsWindow_chan[52] = new Fl_Light_Button(685, 235, 67, 20, "52");
    } // Fl_Light_Button* sendParamsWindow_chan[52]
    { sendParamsWindow_chan[53] = new Fl_Light_Button(685, 255, 67, 20, "53");
    } // Fl_Light_Button* sendParamsWindow_chan[53]
    { sendParamsWindow_chan[54] = new Fl_Light_Button(685, 275, 67, 20, "54");
    } // Fl_Light_Button* sendParamsWindow_chan[54]
    { sendParamsWindow_chan[55] = new Fl_Light_Button(685, 295, 67, 20, "55");
    } // Fl_Light_Button* sendParamsWindow_chan[55]
    { sendParamsWindow_chan[56] = new Fl_Light_Button(685, 315, 67, 20, "56");
    } // Fl_Light_Button* sendParamsWindow_chan[56]
    { sendParamsWindow_chan[57] = new Fl_Light_Button(685, 335, 67, 20, "57");
    } // Fl_Light_Button* sendParamsWindow_chan[57]
    { sendParamsWindow_chan[58] = new Fl_Light_Button(685, 355, 67, 20, "58");
    } // Fl_Light_Button* sendParamsWindow_chan[58]
    { sendParamsWindow_chan[59] = new Fl_Light_Button(685, 375, 67, 20, "59");
    } // Fl_Light_Button* sendParamsWindow_chan[59]
    { sendParamsWindow_chan[60] = new Fl_Light_Button(685, 395, 67, 20, "60");
    } // Fl_Light_Button* sendParamsWindow_chan[60]
    { sendParamsWindow_chan[61] = new Fl_Light_Button(685, 415, 67, 20, "61");
    } // Fl_Light_Button* sendParamsWindow_chan[61]
    { sendParamsWindow_chan[62] = new Fl_Light_Button(685, 435, 67, 20, "62");
    } // Fl_Light_Button* sendParamsWindow_chan[62]
    { sendParamsWindow_chan[63] = new Fl_Light_Button(685, 455, 67, 20, "63");
    } // Fl_Light_Button* sendParamsWindow_chan[63]
    { sendParamsWindow_asic = new Fl_Value_Input(460, 386, 15, 24, "ASIC");
      sendParamsWindow_asic->maximum(3);
      sendParamsWindow_asic->step(1);
      sendParamsWindow_asic->callback((Fl_Callback*)cb_sendParamsWindow_asic);
    } // Fl_Value_Input* sendParamsWindow_asic
    { Fl_Button* o = new Fl_Button(555, 455, 63, 20, "set all");
      o->callback((Fl_Callback*)cb_set);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(619, 455, 63, 20, "clear all");
      o->callback((Fl_Callback*)cb_clear);
    } // Fl_Button* o
    { Fl_Text_Display* o = new Fl_Text_Display(705, 5, 15, 20, "Channel disable");
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Text_Display* o
    { sendParamsWindow_test[0] = new Fl_Light_Button(790, 36, 67, 20, "0");
    } // Fl_Light_Button* sendParamsWindow_test[0]
    { sendParamsWindow_test[1] = new Fl_Light_Button(790, 56, 67, 20, "1");
    } // Fl_Light_Button* sendParamsWindow_test[1]
    { sendParamsWindow_test[2] = new Fl_Light_Button(790, 76, 67, 20, "2");
    } // Fl_Light_Button* sendParamsWindow_test[2]
    { sendParamsWindow_test[3] = new Fl_Light_Button(790, 96, 67, 20, "3");
    } // Fl_Light_Button* sendParamsWindow_test[3]
    { sendParamsWindow_test[4] = new Fl_Light_Button(790, 116, 67, 20, "4");
    } // Fl_Light_Button* sendParamsWindow_test[4]
    { sendParamsWindow_test[5] = new Fl_Light_Button(790, 136, 67, 20, "5");
    } // Fl_Light_Button* sendParamsWindow_test[5]
    { sendParamsWindow_test[6] = new Fl_Light_Button(790, 156, 67, 20, "6");
    } // Fl_Light_Button* sendParamsWindow_test[6]
    { sendParamsWindow_test[7] = new Fl_Light_Button(790, 176, 67, 20, "7");
    } // Fl_Light_Button* sendParamsWindow_test[7]
    { sendParamsWindow_test[8] = new Fl_Light_Button(790, 196, 67, 20, "8");
    } // Fl_Light_Button* sendParamsWindow_test[8]
    { sendParamsWindow_test[9] = new Fl_Light_Button(790, 216, 67, 20, "9");
    } // Fl_Light_Button* sendParamsWindow_test[9]
    { sendParamsWindow_test[10] = new Fl_Light_Button(790, 236, 67, 20, "10");
    } // Fl_Light_Button* sendParamsWindow_test[10]
    { sendParamsWindow_test[11] = new Fl_Light_Button(790, 256, 67, 20, "11");
    } // Fl_Light_Button* sendParamsWindow_test[11]
    { sendParamsWindow_test[12] = new Fl_Light_Button(790, 276, 67, 20, "12");
    } // Fl_Light_Button* sendParamsWindow_test[12]
    { sendParamsWindow_test[13] = new Fl_Light_Button(790, 296, 67, 20, "13");
    } // Fl_Light_Button* sendParamsWindow_test[13]
    { sendParamsWindow_test[14] = new Fl_Light_Button(790, 316, 67, 20, "14");
    } // Fl_Light_Button* sendParamsWindow_test[14]
    { sendParamsWindow_test[15] = new Fl_Light_Button(790, 336, 67, 20, "15");
    } // Fl_Light_Button* sendParamsWindow_test[15]
    { sendParamsWindow_test[16] = new Fl_Light_Button(790, 356, 67, 20, "16");
    } // Fl_Light_Button* sendParamsWindow_test[16]
    { sendParamsWindow_test[17] = new Fl_Light_Button(790, 376, 67, 20, "17");
    } // Fl_Light_Button* sendParamsWindow_test[17]
    { sendParamsWindow_test[18] = new Fl_Light_Button(790, 396, 67, 20, "18");
    } // Fl_Light_Button* sendParamsWindow_test[18]
    { sendParamsWindow_test[19] = new Fl_Light_Button(790, 416, 67, 20, "19");
    } // Fl_Light_Button* sendParamsWindow_test[19]
    { sendParamsWindow_test[20] = new Fl_Light_Button(790, 436, 67, 20, "20");
    } // Fl_Light_Button* sendParamsWindow_test[20]
    { sendParamsWindow_test[21] = new Fl_Light_Button(855, 36, 67, 20, "21");
    } // Fl_Light_Button* sendParamsWindow_test[21]
    { sendParamsWindow_test[22] = new Fl_Light_Button(855, 56, 67, 20, "22");
    } // Fl_Light_Button* sendParamsWindow_test[22]
    { sendParamsWindow_test[23] = new Fl_Light_Button(855, 76, 67, 20, "23");
    } // Fl_Light_Button* sendParamsWindow_test[23]
    { sendParamsWindow_test[24] = new Fl_Light_Button(855, 96, 67, 20, "24");
    } // Fl_Light_Button* sendParamsWindow_test[24]
    { sendParamsWindow_test[25] = new Fl_Light_Button(855, 116, 67, 20, "25");
    } // Fl_Light_Button* sendParamsWindow_test[25]
    { sendParamsWindow_test[26] = new Fl_Light_Button(855, 136, 67, 20, "26");
    } // Fl_Light_Button* sendParamsWindow_test[26]
    { sendParamsWindow_test[27] = new Fl_Light_Button(855, 156, 67, 20, "27");
    } // Fl_Light_Button* sendParamsWindow_test[27]
    { sendParamsWindow_test[28] = new Fl_Light_Button(855, 176, 67, 20, "28");
    } // Fl_Light_Button* sendParamsWindow_test[28]
    { sendParamsWindow_test[29] = new Fl_Light_Button(855, 196, 67, 20, "29");
    } // Fl_Light_Button* sendParamsWindow_test[29]
    { sendParamsWindow_test[30] = new Fl_Light_Button(855, 216, 67, 20, "30");
    } // Fl_Light_Button* sendParamsWindow_test[30]
    { sendParamsWindow_test[31] = new Fl_Light_Button(855, 236, 67, 20, "31");
    } // Fl_Light_Button* sendParamsWindow_test[31]
    { sendParamsWindow_test[32] = new Fl_Light_Button(855, 256, 67, 20, "32");
    } // Fl_Light_Button* sendParamsWindow_test[32]
    { sendParamsWindow_test[33] = new Fl_Light_Button(855, 276, 67, 20, "33");
    } // Fl_Light_Button* sendParamsWindow_test[33]
    { sendParamsWindow_test[34] = new Fl_Light_Button(855, 296, 67, 20, "34");
    } // Fl_Light_Button* sendParamsWindow_test[34]
    { sendParamsWindow_test[35] = new Fl_Light_Button(855, 316, 67, 20, "35");
    } // Fl_Light_Button* sendParamsWindow_test[35]
    { sendParamsWindow_test[36] = new Fl_Light_Button(855, 336, 67, 20, "36");
    } // Fl_Light_Button* sendParamsWindow_test[36]
    { sendParamsWindow_test[37] = new Fl_Light_Button(855, 356, 67, 20, "37");
    } // Fl_Light_Button* sendParamsWindow_test[37]
    { sendParamsWindow_test[38] = new Fl_Light_Button(855, 376, 67, 20, "38");
    } // Fl_Light_Button* sendParamsWindow_test[38]
    { sendParamsWindow_test[39] = new Fl_Light_Button(855, 396, 67, 20, "39");
    } // Fl_Light_Button* sendParamsWindow_test[39]
    { sendParamsWindow_test[40] = new Fl_Light_Button(855, 416, 67, 20, "40");
    } // Fl_Light_Button* sendParamsWindow_test[40]
    { sendParamsWindow_test[41] = new Fl_Light_Button(855, 436, 67, 20, "41");
    } // Fl_Light_Button* sendParamsWindow_test[41]
    { sendParamsWindow_test[42] = new Fl_Light_Button(920, 36, 67, 20, "42");
    } // Fl_Light_Button* sendParamsWindow_test[42]
    { sendParamsWindow_test[43] = new Fl_Light_Button(920, 56, 67, 20, "43");
    } // Fl_Light_Button* sendParamsWindow_test[43]
    { sendParamsWindow_test[44] = new Fl_Light_Button(920, 76, 67, 20, "44");
    } // Fl_Light_Button* sendParamsWindow_test[44]
    { sendParamsWindow_test[45] = new Fl_Light_Button(920, 96, 67, 20, "45");
    } // Fl_Light_Button* sendParamsWindow_test[45]
    { sendParamsWindow_test[46] = new Fl_Light_Button(920, 116, 67, 20, "46");
    } // Fl_Light_Button* sendParamsWindow_test[46]
    { sendParamsWindow_test[47] = new Fl_Light_Button(920, 136, 67, 20, "47");
    } // Fl_Light_Button* sendParamsWindow_test[47]
    { sendParamsWindow_test[48] = new Fl_Light_Button(920, 156, 67, 20, "48");
    } // Fl_Light_Button* sendParamsWindow_test[48]
    { sendParamsWindow_test[49] = new Fl_Light_Button(920, 176, 67, 20, "49");
    } // Fl_Light_Button* sendParamsWindow_test[49]
    { sendParamsWindow_test[50] = new Fl_Light_Button(920, 196, 67, 20, "50");
    } // Fl_Light_Button* sendParamsWindow_test[50]
    { sendParamsWindow_test[51] = new Fl_Light_Button(920, 216, 67, 20, "51");
    } // Fl_Light_Button* sendParamsWindow_test[51]
    { sendParamsWindow_test[52] = new Fl_Light_Button(920, 236, 67, 20, "52");
    } // Fl_Light_Button* sendParamsWindow_test[52]
    { sendParamsWindow_test[53] = new Fl_Light_Button(920, 256, 67, 20, "53");
    } // Fl_Light_Button* sendParamsWindow_test[53]
    { sendParamsWindow_test[54] = new Fl_Light_Button(920, 276, 67, 20, "54");
    } // Fl_Light_Button* sendParamsWindow_test[54]
    { sendParamsWindow_test[55] = new Fl_Light_Button(920, 296, 67, 20, "55");
    } // Fl_Light_Button* sendParamsWindow_test[55]
    { sendParamsWindow_test[56] = new Fl_Light_Button(920, 316, 67, 20, "56");
    } // Fl_Light_Button* sendParamsWindow_test[56]
    { sendParamsWindow_test[57] = new Fl_Light_Button(920, 336, 67, 20, "57");
    } // Fl_Light_Button* sendParamsWindow_test[57]
    { sendParamsWindow_test[58] = new Fl_Light_Button(920, 356, 67, 20, "58");
    } // Fl_Light_Button* sendParamsWindow_test[58]
    { sendParamsWindow_test[59] = new Fl_Light_Button(920, 376, 67, 20, "59");
    } // Fl_Light_Button* sendParamsWindow_test[59]
    { sendParamsWindow_test[60] = new Fl_Light_Button(920, 396, 67, 20, "60");
    } // Fl_Light_Button* sendParamsWindow_test[60]
    { sendParamsWindow_test[61] = new Fl_Light_Button(920, 416, 67, 20, "61");
    } // Fl_Light_Button* sendParamsWindow_test[61]
    { sendParamsWindow_test[62] = new Fl_Light_Button(920, 436, 67, 20, "62");
    } // Fl_Light_Button* sendParamsWindow_test[62]
    { sendParamsWindow_test[63] = new Fl_Light_Button(920, 456, 67, 20, "63");
    } // Fl_Light_Button* sendParamsWindow_test[63]
    { Fl_Button* o = new Fl_Button(790, 456, 63, 20, "set all");
      o->callback((Fl_Callback*)cb_set1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(854, 456, 63, 20, "clear all");
      o->callback((Fl_Callback*)cb_clear1);
    } // Fl_Button* o
    { Fl_Text_Display* o = new Fl_Text_Display(940, 6, 15, 20, "Test enable");
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Text_Display* o
    sendParamsWindow->end();
  } // Fl_Double_Window* sendParamsWindow
  { setHoldTimeWindow = new Fl_Double_Window(312, 165, "Set hold time and take data");
    setHoldTimeWindow->user_data((void*)(this));
    { setHoldTimeWindow_holdTime = new Fl_Value_Input(235, 15, 25, 25, "Hold time setting (all ASICs)::");
    } // Fl_Value_Input* setHoldTimeWindow_holdTime
    { setHoldTimeWindow_setBut = new Fl_Button(70, 65, 80, 25, "Set");
      setHoldTimeWindow_setBut->callback((Fl_Callback*)cb_setHoldTimeWindow_setBut);
    } // Fl_Button* setHoldTimeWindow_setBut
    { setHoldTimeWindow_autorunBut = new Fl_Button(175, 65, 80, 25, "Autorun");
      setHoldTimeWindow_autorunBut->callback((Fl_Callback*)cb_setHoldTimeWindow_autorunBut);
    } // Fl_Button* setHoldTimeWindow_autorunBut
    { Fl_Button* o = new Fl_Button(125, 115, 80, 25, "Close");
      o->callback((Fl_Callback*)cb_Close1);
      o->deactivate();
    } // Fl_Button* o
    setHoldTimeWindow->end();
  } // Fl_Double_Window* setHoldTimeWindow
  { setTrigWindow = new Fl_Double_Window(357, 203, "Trigger Options");
    setTrigWindow->user_data((void*)(this));
    { setTrigWindow_delayTime = new Fl_Value_Input(210, 16, 25, 24, "Trigger delay (units of 3.2 us)");
      setTrigWindow_delayTime->value(3);
    } // Fl_Value_Input* setTrigWindow_delayTime
    { setTrigWindow_timeoutTime = new Fl_Value_Input(211, 106, 25, 24, "Trigger timeout (units of 3.2 us)");
      setTrigWindow_timeoutTime->value(31);
      setTrigWindow_timeoutTime->deactivate();
    } // Fl_Value_Input* setTrigWindow_timeoutTime
    { Fl_Button* o = new Fl_Button(125, 155, 80, 25, "Close");
      o->callback((Fl_Callback*)cb_Close2);
      o->deactivate();
    } // Fl_Button* o
    { setTrigWindow_setDelay = new Fl_Button(255, 15, 80, 25, "Set");
      setTrigWindow_setDelay->callback((Fl_Callback*)cb_setTrigWindow_setDelay);
    } // Fl_Button* setTrigWindow_setDelay
    { setTrigWindow_setTimeout = new Fl_Button(255, 105, 80, 25, "Set");
      setTrigWindow_setTimeout->callback((Fl_Callback*)cb_setTrigWindow_setTimeout);
      setTrigWindow_setTimeout->deactivate();
    } // Fl_Button* setTrigWindow_setTimeout
    { setTrigWindow_useTimeout = new Fl_Value_Input(211, 63, 25, 21, "Use timeout");
      setTrigWindow_useTimeout->value(1);
      setTrigWindow_useTimeout->callback((Fl_Callback*)cb_setTrigWindow_useTimeout);
    } // Fl_Value_Input* setTrigWindow_useTimeout
    { setTrigWindow_setTrigMode = new Fl_Button(255, 60, 80, 25, "Set");
      setTrigWindow_setTrigMode->callback((Fl_Callback*)cb_setTrigWindow_setTrigMode);
    } // Fl_Button* setTrigWindow_setTrigMode
    setTrigWindow->end();
  } // Fl_Double_Window* setTrigWindow
  { sendCommandsWindow = new Fl_Double_Window(364, 175, "Send Commands");
    sendCommandsWindow->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(265, 10, 70, 25, "Send");
      o->value(1);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Send);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 130, 70, 25, "Close");
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 70, 70, 25, "Send");
      o->value(1);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Send1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(70, 100, 180, 25, "Strobe Attenuator State 0");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Strobe);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(70, 130, 180, 25, "Strobe Attenuator State 1");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Strobe1);
    } // Fl_Button* o
    { highVoltage_input = new Fl_Value_Input(175, 11, 75, 24, "HV Set (0-4095):");
    } // Fl_Value_Input* highVoltage_input
    { clockLow_input = new Fl_Value_Input(175, 40, 75, 24, "Clock Set Low:");
    } // Fl_Value_Input* clockLow_input
    { clockHigh_input = new Fl_Value_Input(175, 70, 75, 24, "Clock Set High:");
    } // Fl_Value_Input* clockHigh_input
    sendCommandsWindow->end();
  } // Fl_Double_Window* sendCommandsWindow
  { AboutWindow = new Fl_Double_Window(361, 109, "About");
    AboutWindow->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(140, 9, 80, 16, "FOXSI Ground Station Software");
      o->labelfont(1);
    } // Fl_Box* o
    { new Fl_Box(140, 29, 80, 16, "Written by");
    } // Fl_Box* o
    { new Fl_Box(140, 49, 80, 16, "Steven Christe, Lindsay Glesener, Stephen McBride");
    } // Fl_Box* o
    { new Fl_Box(140, 69, 80, 16, "2011");
    } // Fl_Box* o
    AboutWindow->end();
  } // Fl_Double_Window* AboutWindow
  { PreferenceWindow = new Fl_Double_Window(429, 175, "Preferences");
    PreferenceWindow->user_data((void*)(this));
    { pixelhalflife_value = new Fl_Value_Input(295, 46, 70, 24, "pixel half life (s)");
      pixelhalflife_value->value(5);
    } // Fl_Value_Input* pixelhalflife_value
    { fileTypeChoice = new Fl_Choice(70, 45, 75, 25, "File type:");
      fileTypeChoice->down_box(FL_BORDER_BOX);
      fileTypeChoice->menu(menu_fileTypeChoice);
    } // Fl_Choice* fileTypeChoice
    { Fl_Button* o = new Fl_Button(280, 145, 63, 20, "OK");
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(350, 145, 63, 20, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(340, 15, 75, 25, "Change");
      o->callback((Fl_Callback*)cb_Change);
    } // Fl_Button* o
    { datafilesavedir_fileInput = new Fl_File_Input(70, 6, 260, 34, "save dir:");
    } // Fl_File_Input* datafilesavedir_fileInput
    { readdelay_value = new Fl_Value_Input(295, 71, 70, 24, "read delay (us)");
      readdelay_value->value(10000);
    } // Fl_Value_Input* readdelay_value
    { DataSource_choice = new Fl_Choice(95, 80, 95, 25, "Data Source:");
      DataSource_choice->down_box(FL_BORDER_BOX);
      DataSource_choice->menu(menu_DataSource_choice);
    } // Fl_Choice* DataSource_choice
    PreferenceWindow->end();
  } // Fl_Double_Window* PreferenceWindow
  app=new Application();
  data=new Foxsidata();
  usb=new USB_d2xx();
  buff=new Fl_Text_Buffer();
  consoleBuf->buffer(buff);
  prefs=new Fl_Preferences(Fl_Preferences::USER, "sdc", "FOXSI GSE");
  // initialization
  timebinsize_counter->step(0.1, 1);
  lightcurvexmax_counter->step(5, 10);
}

void Gui::show() {
  mainWindow->show();
  mainHistogramWindow->show();
  mainImageWindow->show();
  mainLightcurveWindow->show();
  subImageWindow->show();
}
