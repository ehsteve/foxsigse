// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "gui.h"

void Gui::cb_About_i(Fl_Menu_*, void*) {
  AboutWindow->show();
}
void Gui::cb_About(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void Gui::cb_Preferences_i(Fl_Menu_*, void*) {
  app->read_preferences();
app->update_preferencewindow();
PreferenceWindow->show();
}
void Gui::cb_Preferences(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Preferences_i(o,v);
}

void Gui::cb_Quit_i(Fl_Menu_*, void*) {
  prefs->flush();
exit(1);
}
void Gui::cb_Quit(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void Gui::cb_readFile_i(Fl_Menu_*, void*) {
  app->read_file();
}
void Gui::cb_readFile(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_readFile_i(o,v);
}

void Gui::cb_Commanding_i(Fl_Menu_*, void*) {
  sendCommandsWindow->show();
}
void Gui::cb_Commanding(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Commanding_i(o,v);
}

void Gui::cb_ACTEL_i(Fl_Menu_*, void*) {
  sendParamsWindow->show();
}
void Gui::cb_ACTEL(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_ACTEL_i(o,v);
}

Fl_Menu_Item Gui::menu_menuBar[] = {
 {"FOXSI GSE", 0,  0, 0, 64, FL_NORMAL_LABEL, 1, 14, 0},
 {"About FOXSI GSE", 0,  (Fl_Callback*)Gui::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences...", 0,  (Fl_Callback*)Gui::cb_Preferences, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0x400071,  (Fl_Callback*)Gui::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Formatter Save File", 0,  (Fl_Callback*)Gui::cb_readFile, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read USB Stream", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Tele Stream", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Spec", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Lightcurve", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Window", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Commanding", 0,  (Fl_Callback*)Gui::cb_Commanding, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ACTEL Commanding", 0,  (Fl_Callback*)Gui::cb_ACTEL, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Gui::fileMenu = Gui::menu_menuBar + 5;
Fl_Menu_Item* Gui::readFile = Gui::menu_menuBar + 6;
Fl_Menu_Item* Gui::readUSBStream = Gui::menu_menuBar + 7;
Fl_Menu_Item* Gui::readTeleStream = Gui::menu_menuBar + 8;
Fl_Menu_Item* Gui::WritePicScreen = Gui::menu_menuBar + 9;
Fl_Menu_Item* Gui::WriteLightcurve = Gui::menu_menuBar + 10;
Fl_Menu_Item* Gui::menuProc = Gui::menu_menuBar + 12;

void Gui::cb_Flush_i(Fl_Button*, void*) {
  app->flush_image();
}
void Gui::cb_Flush(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush_i(o,v);
}

void Gui::cb_mainImage_integrate_button_i(Fl_Light_Button*, void*) {
  app->toggle_image_integrate();
}
void Gui::cb_mainImage_integrate_button(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainImage_integrate_button_i(o,v);
}

void Gui::cb_Save_i(Fl_Button*, void*) {
  app->save_image_to_file();
}
void Gui::cb_Save(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void Gui::cb_showmask_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_show_mask();
}
void Gui::cb_showmask_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_showmask_checkbox_i(o,v);
}

void Gui::cb_mainImageMax_slider_i(Fl_Value_Slider*, void*) {
  app->set_imagemax();
}
void Gui::cb_mainImageMax_slider(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainImageMax_slider_i(o,v);
}

void Gui::cb_0_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(0);
}
void Gui::cb_0(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_0_i(o,v);
}

void Gui::cb_1_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(1);
}
void Gui::cb_1(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void Gui::cb_2_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(2);
}
void Gui::cb_2(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void Gui::cb_3_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(3);
}
void Gui::cb_3(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void Gui::cb_4_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(4);
}
void Gui::cb_4(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void Gui::cb_5_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(5);
}
void Gui::cb_5(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_5_i(o,v);
}

void Gui::cb_6_i(Fl_Menu_*, void*) {
  app->set_detector_to_display(6);
}
void Gui::cb_6(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_6_i(o,v);
}

Fl_Menu_Item Gui::menu_[] = {
 {"0", 0,  (Fl_Callback*)Gui::cb_0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1", 0,  (Fl_Callback*)Gui::cb_1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  (Fl_Callback*)Gui::cb_2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  (Fl_Callback*)Gui::cb_3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  (Fl_Callback*)Gui::cb_4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  (Fl_Callback*)Gui::cb_5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"6", 0,  (Fl_Callback*)Gui::cb_6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_Energy_i(Fl_Menu_*, void*) {
  app->set_energy_histogram();
}
void Gui::cb_Energy(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Energy_i(o,v);
}

Fl_Menu_Item Gui::menu_mainHistogram_choice[] = {
 {"Channel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Energy", 0,  (Fl_Callback*)Gui::cb_Energy, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_Flush1_i(Fl_Button*, void*) {
  app->flush_histogram();
}
void Gui::cb_Flush1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush1_i(o,v);
}

void Gui::cb_histogrambinsize_counter_i(Fl_Counter*, void*) {
  app->update_histogrambinsize();
}
void Gui::cb_histogrambinsize_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_histogrambinsize_counter_i(o,v);
}

void Gui::cb_histogramxmax_counter_i(Fl_Counter*, void*) {
  app->update_histogramxmax();
}
void Gui::cb_histogramxmax_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_histogramxmax_counter_i(o,v);
}

void Gui::cb_Save1_i(Fl_Button*, void*) {
  app->save_histogram_to_file();
}
void Gui::cb_Save1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

void Gui::cb_mainImageMin_slider_i(Fl_Value_Slider*, void*) {
  app->set_lowthreshold();
}
void Gui::cb_mainImageMin_slider(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainImageMin_slider_i(o,v);
}

void Gui::cb_mainHistogram_ymax_slider_i(Fl_Value_Slider*, void*) {
  app->set_histogram_max();
}
void Gui::cb_mainHistogram_ymax_slider(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainHistogram_ymax_slider_i(o,v);
}

void Gui::cb_reset_i(Fl_Button*, void*) {
  app->reset_read_counter();
}
void Gui::cb_reset(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

void Gui::cb_initializeBut_i(Fl_Light_Button*, void*) {
  app->initialize();
}
void Gui::cb_initializeBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_initializeBut_i(o,v);
}

void Gui::cb_startReadingDataButton_i(Fl_Button*, void*) {
  app->read_preferences();
app->start_reading_data();
}
void Gui::cb_startReadingDataButton(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_startReadingDataButton_i(o,v);
}

void Gui::cb_closeBut_i(Fl_Light_Button*, void*) {
  app->close_data();
}
void Gui::cb_closeBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_closeBut_i(o,v);
}

void Gui::cb_writeFileBut_i(Fl_Light_Button*, void*) {
  app->start_file();
}
void Gui::cb_writeFileBut(Fl_Light_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_writeFileBut_i(o,v);
}

void Gui::cb_stopReadingDataButton_i(Fl_Button*, void*) {
  app->stop_reading_data();
}
void Gui::cb_stopReadingDataButton(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_stopReadingDataButton_i(o,v);
}

void Gui::cb_test_button_i(Fl_Button*, void*) {
  app->testfunction();
}
void Gui::cb_test_button(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_test_button_i(o,v);
}

void Gui::cb_flush_i(Fl_Button*, void*) {
  app->flush_all();
}
void Gui::cb_flush(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_flush_i(o,v);
}

void Gui::cb_Flush2_i(Fl_Button*, void*) {
  app->flush_timeseries();
}
void Gui::cb_Flush2(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Flush2_i(o,v);
}

void Gui::cb_lightcurvexmax_counter_i(Fl_Counter*, void*) {
  app->update_lightcurvexmax();
}
void Gui::cb_lightcurvexmax_counter(Fl_Counter* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_lightcurvexmax_counter_i(o,v);
}

void Gui::cb_mainLightcurve_ymaxslider_i(Fl_Value_Slider*, void*) {
  app->set_lightcurve_ymax();
}
void Gui::cb_mainLightcurve_ymaxslider(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_mainLightcurve_ymaxslider_i(o,v);
}

void Gui::cb_Clear_i(Fl_Button*, void*) {
  app->clear_console();
}
void Gui::cb_Clear(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

void Gui::cb_detector0_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector0_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector0_checkbox_i(o,v);
}

void Gui::cb_detector1_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector1_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector1_checkbox_i(o,v);
}

void Gui::cb_detector2_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector2_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector2_checkbox_i(o,v);
}

void Gui::cb_detector3_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector3_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector3_checkbox_i(o,v);
}

void Gui::cb_detector4_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector4_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector4_checkbox_i(o,v);
}

void Gui::cb_detector5_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector5_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector5_checkbox_i(o,v);
}

void Gui::cb_detector6_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detector6_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detector6_checkbox_i(o,v);
}

void Gui::cb_detectorAll_checkbox_i(Fl_Check_Button*, void*) {
  app->toggle_detector_display();
}
void Gui::cb_detectorAll_checkbox(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_detectorAll_checkbox_i(o,v);
}

void Gui::cb_sendParamsWindow_sendBut_i(Fl_Button*, void*) {
  app->save_settings();
app->send_params();
//sendParamsWindow->hide();
}
void Gui::cb_sendParamsWindow_sendBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sendParamsWindow_sendBut_i(o,v);
}

void Gui::cb_Close_i(Fl_Button*, void*) {
  sendParamsWindow->hide();
}
void Gui::cb_Close(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void Gui::cb_sendParamsWindow_asic_i(Fl_Value_Input*, void*) {
  app->restore_settings();
}
void Gui::cb_sendParamsWindow_asic(Fl_Value_Input* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sendParamsWindow_asic_i(o,v);
}

void Gui::cb_set_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_chan[i]->set();
}
void Gui::cb_set(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_set_i(o,v);
}

void Gui::cb_clear_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_chan[i]->clear();
}
void Gui::cb_clear(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_clear_i(o,v);
}

void Gui::cb_set1_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_test[i]->set();
}
void Gui::cb_set1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_set1_i(o,v);
}

void Gui::cb_clear1_i(Fl_Button*, void*) {
  for(int i=0; i<64; i++) 
  sendParamsWindow_test[i]->clear();
}
void Gui::cb_clear1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_clear1_i(o,v);
}

void Gui::cb_setHoldTimeWindow_setBut_i(Fl_Button*, void*) {
  app->send_global_params(0);
}
void Gui::cb_setHoldTimeWindow_setBut(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setHoldTimeWindow_setBut_i(o,v);
}

void Gui::cb_Close1_i(Fl_Button*, void*) {
  setHoldTimeWindow->hide();
}
void Gui::cb_Close1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void Gui::cb_Close2_i(Fl_Button*, void*) {
  setTrigWindow->hide();
}
void Gui::cb_Close2(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void Gui::cb_setTrigWindow_setDelay_i(Fl_Button*, void*) {
  app->send_global_params(3);
}
void Gui::cb_setTrigWindow_setDelay(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setDelay_i(o,v);
}

void Gui::cb_setTrigWindow_setTimeout_i(Fl_Button*, void*) {
  app->send_global_params(1);
}
void Gui::cb_setTrigWindow_setTimeout(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setTimeout_i(o,v);
}

void Gui::cb_setTrigWindow_useTimeout_i(Fl_Value_Input*, void*) {
  if(setTrigWindow_useTimeout->value()){
		setTrigWindow_setTimeout->activate();
		setTrigWindow_timeoutTime->activate();
		} else{
		setTrigWindow_setTimeout->deactivate();
		setTrigWindow_timeoutTime->deactivate();
	  };
}
void Gui::cb_setTrigWindow_useTimeout(Fl_Value_Input* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_useTimeout_i(o,v);
}

void Gui::cb_setTrigWindow_setTrigMode_i(Fl_Button*, void*) {
  app->send_global_params(2);
}
void Gui::cb_setTrigWindow_setTrigMode(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_setTrigWindow_setTrigMode_i(o,v);
}

void Gui::cb_Send_i(Fl_Button*, void*) {
  app->send_voltage_command();
}
void Gui::cb_Send(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Send_i(o,v);
}

void Gui::cb_Close3_i(Fl_Button*, void*) {
  sendCommandsWindow->hide();
}
void Gui::cb_Close3(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Close3_i(o,v);
}

void Gui::cb_Send1_i(Fl_Button*, void*) {
  app->send_clockset_command();
}
void Gui::cb_Send1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Send1_i(o,v);
}

void Gui::cb_Strobe_i(Fl_Button*, void*) {
  app->send_atten_state(0);
}
void Gui::cb_Strobe(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Strobe_i(o,v);
}

void Gui::cb_Strobe1_i(Fl_Button*, void*) {
  app->send_atten_state(1);
}
void Gui::cb_Strobe1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Strobe1_i(o,v);
}

Fl_Menu_Item Gui::menu_fileTypeChoice[] = {
 {"Text (slow)", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Binary (fast)", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_OK_i(Fl_Button*, void*) {
  app->save_preferences();
PreferenceWindow->hide();
}
void Gui::cb_OK(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void Gui::cb_Cancel_i(Fl_Button*, void*) {
  PreferenceWindow->hide();
}
void Gui::cb_Cancel(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void Gui::cb_Change_i(Fl_Button*, void*) {
  app->set_datafile_dir();
}
void Gui::cb_Change(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Change_i(o,v);
}

Fl_Menu_Item Gui::menu_DataSource_choice[] = {
 {"Simulate", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"ACTEL", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Formatter", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Formatter File", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Gui::cb_Change1_i(Fl_Button*, void*) {
  app->set_gsesync_file();
}
void Gui::cb_Change1(Fl_Button* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_Change1_i(o,v);
}

Gui::Gui() {
  { mainWindow = new Fl_Double_Window(1361, 937, "FOXSI GSE");
    mainWindow->color((Fl_Color)19);
    mainWindow->user_data((void*)(this));
    { menuBar = new Fl_Menu_Bar(-5, -1, 1460, 26, "menuBar");
      menuBar->box(FL_BORDER_BOX);
      menuBar->color((Fl_Color)29);
      menuBar->menu(menu_menuBar);
    } // Fl_Menu_Bar* menuBar
    { Fl_Group* o = new Fl_Group(10, 53, 740, 872, "Image");
      { mainImageWindow = new mainImage(15, 640, 280, 285, "Image");
        mainImageWindow->box(FL_GTK_UP_BOX);
        mainImageWindow->color(FL_BACKGROUND_COLOR);
        mainImageWindow->selection_color(FL_BACKGROUND_COLOR);
        mainImageWindow->labeltype(FL_NORMAL_LABEL);
        mainImageWindow->labelfont(0);
        mainImageWindow->labelsize(14);
        mainImageWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainImageWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainImageWindow->when(FL_WHEN_RELEASE);
      } // mainImage* mainImageWindow
      { pixelNum = new Fl_Output(660, 437, 80, 25, "Pixel");
      } // Fl_Output* pixelNum
      { Fl_Button* o = new Fl_Button(653, 168, 80, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush);
      } // Fl_Button* o
      { mainImage_integrate_button = new Fl_Light_Button(654, 200, 80, 30, "Integrate");
        mainImage_integrate_button->callback((Fl_Callback*)cb_mainImage_integrate_button);
      } // Fl_Light_Button* mainImage_integrate_button
      { Fl_Button* o = new Fl_Button(679, 235, 54, 25, "Save");
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      { showmask_checkbox = new Fl_Check_Button(649, 60, 63, 15, "show mask");
        showmask_checkbox->down_box(FL_DOWN_BOX);
        showmask_checkbox->callback((Fl_Callback*)cb_showmask_checkbox);
      } // Fl_Check_Button* showmask_checkbox
      { pixelCounts = new Fl_Value_Output(659, 81, 75, 24, "Cts:");
        pixelCounts->step(1);
      } // Fl_Value_Output* pixelCounts
      { Lockbut = new Fl_Light_Button(629, 138, 105, 25, "lock position");
      } // Fl_Light_Button* Lockbut
      { mainImageMax_slider = new Fl_Value_Slider(665, 270, 31, 145, "max:");
        mainImageMax_slider->maximum(100);
        mainImageMax_slider->step(1);
        mainImageMax_slider->textsize(14);
        mainImageMax_slider->callback((Fl_Callback*)cb_mainImageMax_slider);
        mainImageMax_slider->align(Fl_Align(258));
      } // Fl_Value_Slider* mainImageMax_slider
      { detectorsImageWindow = new detectorsImage(14, 56, 595, 552, "All Detectors Image");
        detectorsImageWindow->box(FL_GTK_UP_BOX);
        detectorsImageWindow->color(FL_BACKGROUND_COLOR);
        detectorsImageWindow->selection_color(FL_BACKGROUND_COLOR);
        detectorsImageWindow->labeltype(FL_NORMAL_LABEL);
        detectorsImageWindow->labelfont(0);
        detectorsImageWindow->labelsize(14);
        detectorsImageWindow->labelcolor(FL_FOREGROUND_COLOR);
        detectorsImageWindow->align(Fl_Align(FL_ALIGN_CENTER));
        detectorsImageWindow->when(FL_WHEN_RELEASE);
      } // detectorsImage* detectorsImageWindow
      { pixel_halflife_slider = new Fl_Value_Slider(700, 270, 30, 145, "half-life");
        pixel_halflife_slider->maximum(30);
        pixel_halflife_slider->step(0.1);
        pixel_halflife_slider->value(1);
        pixel_halflife_slider->textsize(14);
        pixel_halflife_slider->align(Fl_Align(294));
      } // Fl_Value_Slider* pixel_halflife_slider
      { Fl_Choice* o = new Fl_Choice(75, 615, 70, 20, "#:");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_);
      } // Fl_Choice* o
      { arcminOffset = new Fl_Output(660, 465, 80, 25, "Arcmin");
      } // Fl_Output* arcminOffset
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1040, 65, 315, 170, "Telemetry Info");
      o->box(FL_THIN_UP_FRAME);
      { shutterstateOutput = new Fl_Value_Output(1314, 73, 39, 22, "Shutter state");
        shutterstateOutput->step(1);
      } // Fl_Value_Output* shutterstateOutput
      { tempOutput2 = new Fl_Value_Output(1076, 156, 40, 24, "FAct");
        tempOutput2->tooltip("ACTEL on formatter board");
        tempOutput2->step(0.1);
      } // Fl_Value_Output* tempOutput2
      { HVOutput = new Fl_Value_Output(1077, 72, 40, 24, "HV");
        HVOutput->step(1);
      } // Fl_Value_Output* HVOutput
      { tempOutput1 = new Fl_Value_Output(1076, 128, 40, 24, "Pwr");
        tempOutput1->tooltip("power board");
        tempOutput1->step(0.1);
      } // Fl_Value_Output* tempOutput1
      { tempOutput3 = new Fl_Value_Output(1076, 182, 40, 23, "FClk");
        tempOutput3->tooltip("Clock on formatter board");
        tempOutput3->step(0.1);
      } // Fl_Value_Output* tempOutput3
      { tempOutput = new Fl_Value_Output(1077, 101, 40, 24, "Tref");
        tempOutput->step(0.1);
      } // Fl_Value_Output* tempOutput
      { tempOutput10 = new Fl_Value_Output(1240, 160, 40, 24, "DPlan");
        tempOutput10->tooltip("Detector Plane (near 3)");
        tempOutput10->step(0.1);
      } // Fl_Value_Output* tempOutput10
      { tempOutput7 = new Fl_Value_Output(1240, 130, 40, 24, "Det1");
        tempOutput7->tooltip("Detector 1");
        tempOutput7->step(0.1);
      } // Fl_Value_Output* tempOutput7
      { tempOutput11 = new Fl_Value_Output(1240, 100, 40, 24, "Det4");
        tempOutput11->tooltip("Detector 5");
        tempOutput11->step(0.1);
      } // Fl_Value_Output* tempOutput11
      { tempOutput6 = new Fl_Value_Output(1153, 157, 40, 24, "Det6");
        tempOutput6->tooltip("Detector 6");
        tempOutput6->step(0.1);
      } // Fl_Value_Output* tempOutput6
      { tempOutput5 = new Fl_Value_Output(1152, 130, 40, 24, "ABrd");
        tempOutput5->tooltip("ACTEL board");
        tempOutput5->step(0.1);
      } // Fl_Value_Output* tempOutput5
      { tempOutput9 = new Fl_Value_Output(1153, 183, 40, 22, "Det3");
        tempOutput9->tooltip("Detector 3");
        tempOutput9->step(0.1);
      } // Fl_Value_Output* tempOutput9
      { tempOutput4 = new Fl_Value_Output(1152, 100, 40, 24, "AAct");
        tempOutput4->tooltip("ACTEL on ACTEL board");
        tempOutput4->step(0.1);
      } // Fl_Value_Output* tempOutput4
      { tempOutput8 = new Fl_Value_Output(1240, 186, 40, 20, "Det0");
        tempOutput8->tooltip("Detector 0");
        tempOutput8->step(0.1);
      } // Fl_Value_Output* tempOutput8
      { VoltageOutput1 = new Fl_Value_Output(1313, 129, 40, 24, "-5V");
        VoltageOutput1->step(0.01);
      } // Fl_Value_Output* VoltageOutput1
      { VoltageOutput0 = new Fl_Value_Output(1313, 100, 40, 24, "5V");
        VoltageOutput0->step(0.01);
      } // Fl_Value_Output* VoltageOutput0
      { VoltageOutput2 = new Fl_Value_Output(1313, 157, 40, 24, "1.5V");
        VoltageOutput2->step(0.01);
      } // Fl_Value_Output* VoltageOutput2
      { VoltageOutput3 = new Fl_Value_Output(1313, 185, 40, 20, "3.3V");
        VoltageOutput3->step(0.01);
      } // Fl_Value_Output* VoltageOutput3
      { CommandCntOutput = new Fl_Value_Output(1153, 208, 40, 25, "CmdCnt");
      } // Fl_Value_Output* CommandCntOutput
      { CommandOutput = new Fl_Output(1240, 211, 115, 23, "Cmd:");
      } // Fl_Output* CommandOutput
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(295, 478, 1055, 446, "Histogram");
      o->color((Fl_Color)41);
      { mainHistogramWindow = new mainHistogram(845, 480, 325, 278, "Histogram");
        mainHistogramWindow->box(FL_GTK_UP_BOX);
        mainHistogramWindow->color(FL_BACKGROUND_COLOR);
        mainHistogramWindow->selection_color(FL_BACKGROUND_COLOR);
        mainHistogramWindow->labeltype(FL_NORMAL_LABEL);
        mainHistogramWindow->labelfont(0);
        mainHistogramWindow->labelsize(14);
        mainHistogramWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainHistogramWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainHistogramWindow->when(FL_WHEN_RELEASE);
      } // mainHistogram* mainHistogramWindow
      { mainHistogram_choice = new Fl_Choice(1235, 545, 105, 25, "choice:");
        mainHistogram_choice->down_box(FL_BORDER_BOX);
        mainHistogram_choice->menu(menu_mainHistogram_choice);
      } // Fl_Choice* mainHistogram_choice
      { histCounts = new Fl_Value_Output(1265, 516, 75, 24, "Counts:");
        histCounts->step(1);
      } // Fl_Value_Output* histCounts
      { histEnergy = new Fl_Value_Output(1265, 486, 75, 24, "Chan/Energy:");
        histEnergy->step(1);
      } // Fl_Value_Output* histEnergy
      { Fl_Button* o = new Fl_Button(1275, 574, 65, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush1);
      } // Fl_Button* o
      { histogrambinsize_counter = new Fl_Counter(1225, 604, 115, 20, "bin size:");
        histogrambinsize_counter->minimum(1);
        histogrambinsize_counter->step(1);
        histogrambinsize_counter->value(25);
        histogrambinsize_counter->callback((Fl_Callback*)cb_histogrambinsize_counter);
      } // Fl_Counter* histogrambinsize_counter
      { histogramxmax_counter = new Fl_Counter(1225, 645, 115, 20, "Chan max:");
        histogramxmax_counter->minimum(1);
        histogramxmax_counter->maximum(1024);
        histogramxmax_counter->step(1);
        histogramxmax_counter->value(1024);
        histogramxmax_counter->callback((Fl_Callback*)cb_histogramxmax_counter);
      } // Fl_Counter* histogramxmax_counter
      { Fl_Button* o = new Fl_Button(1215, 574, 54, 25, "Save");
        o->callback((Fl_Callback*)cb_Save1);
      } // Fl_Button* o
      { mainImageMin_slider = new Fl_Value_Slider(790, 645, 45, 105, "min ADC");
        mainImageMin_slider->minimum(1);
        mainImageMin_slider->maximum(1023);
        mainImageMin_slider->step(1);
        mainImageMin_slider->value(100);
        mainImageMin_slider->textsize(14);
        mainImageMin_slider->callback((Fl_Callback*)cb_mainImageMin_slider);
        mainImageMin_slider->align(Fl_Align(289));
      } // Fl_Value_Slider* mainImageMin_slider
      { minus_common_mode_checkbox = new Fl_Check_Button(1180, 735, 160, 15, "minus common mode");
        minus_common_mode_checkbox->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* minus_common_mode_checkbox
      { mainHistogram_ymax_slider = new Fl_Value_Slider(790, 500, 45, 115, "max");
        mainHistogram_ymax_slider->maximum(20000);
        mainHistogram_ymax_slider->step(200);
        mainHistogram_ymax_slider->textsize(14);
        mainHistogram_ymax_slider->callback((Fl_Callback*)cb_mainHistogram_ymax_slider);
        mainHistogram_ymax_slider->align(Fl_Align(289));
      } // Fl_Value_Slider* mainHistogram_ymax_slider
      { detectorsHistogramWindow = new detectorsHistogram(300, 774, 1050, 150, "All Histogram Display");
        detectorsHistogramWindow->box(FL_GTK_UP_BOX);
        detectorsHistogramWindow->color(FL_BACKGROUND_COLOR);
        detectorsHistogramWindow->selection_color(FL_BACKGROUND_COLOR);
        detectorsHistogramWindow->labeltype(FL_NORMAL_LABEL);
        detectorsHistogramWindow->labelfont(0);
        detectorsHistogramWindow->labelsize(14);
        detectorsHistogramWindow->labelcolor(FL_FOREGROUND_COLOR);
        detectorsHistogramWindow->align(Fl_Align(FL_ALIGN_CENTER));
        detectorsHistogramWindow->when(FL_WHEN_RELEASE);
      } // detectorsHistogram* detectorsHistogramWindow
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(745, 55, 290, 215, "Control");
      o->box(FL_DOWN_FRAME);
      { frameTime = new Fl_Value_Output(820, 243, 75, 23, "frame time");
        frameTime->maximum(1e+07);
        frameTime->step(1);
      } // Fl_Value_Output* frameTime
      { framenumOutput = new Fl_Value_Output(807, 116, 75, 24, "Frame #:");
        framenumOutput->maximum(1e+09);
        framenumOutput->step(1);
      } // Fl_Value_Output* framenumOutput
      { Fl_Button* o = new Fl_Button(970, 85, 55, 25, "reset");
        o->callback((Fl_Callback*)cb_reset);
      } // Fl_Button* o
      { initializeBut = new Fl_Light_Button(753, 58, 70, 25, "Initialize");
        initializeBut->box(FL_THIN_UP_BOX);
        initializeBut->callback((Fl_Callback*)cb_initializeBut);
      } // Fl_Light_Button* initializeBut
      { startReadingDataButton = new Fl_Button(826, 58, 60, 25, "Start");
        startReadingDataButton->callback((Fl_Callback*)cb_startReadingDataButton);
        startReadingDataButton->deactivate();
      } // Fl_Button* startReadingDataButton
      { closeBut = new Fl_Light_Button(945, 58, 80, 25, "Close");
        closeBut->callback((Fl_Callback*)cb_closeBut);
        closeBut->deactivate();
      } // Fl_Light_Button* closeBut
      { nEvents = new Fl_Value_Input(807, 146, 40, 24, "events");
      } // Fl_Value_Input* nEvents
      { writeFileBut = new Fl_Light_Button(753, 85, 95, 25, "Write to file");
        writeFileBut->callback((Fl_Callback*)cb_writeFileBut);
      } // Fl_Light_Button* writeFileBut
      { stopReadingDataButton = new Fl_Button(891, 58, 50, 25, "Stop");
        stopReadingDataButton->labelcolor((Fl_Color)1);
        stopReadingDataButton->callback((Fl_Callback*)cb_stopReadingDataButton);
        stopReadingDataButton->deactivate();
      } // Fl_Button* stopReadingDataButton
      { inttimeOutput = new Fl_Value_Output(840, 216, 65, 24, "local time (s):");
      } // Fl_Value_Output* inttimeOutput
      { test_button = new Fl_Button(760, 185, 60, 25, "test2");
        test_button->callback((Fl_Callback*)cb_test_button);
      } // Fl_Button* test_button
      { frame_missOutput = new Fl_Value_Output(980, 116, 40, 24, "frame miss %:");
        frame_missOutput->step(1);
      } // Fl_Value_Output* frame_missOutput
      { bad_frameOutput = new Fl_Value_Output(980, 146, 40, 24, "bad frame %:");
        bad_frameOutput->step(1);
      } // Fl_Value_Output* bad_frameOutput
      { no_triggerOutput = new Fl_Value_Output(980, 176, 40, 24, "no trig %:");
        no_triggerOutput->step(1);
      } // Fl_Value_Output* no_triggerOutput
      { int_timeOutput = new Fl_Value_Output(965, 243, 65, 23, "int time (s)");
        int_timeOutput->maximum(1e+10);
        int_timeOutput->step(1);
      } // Fl_Value_Output* int_timeOutput
      { Fl_Button* o = new Fl_Button(905, 85, 55, 25, "flush all");
        o->callback((Fl_Callback*)cb_flush);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(765, 345, 585, 110, "LightCurve");
      o->box(FL_THIN_UP_FRAME);
      { mainLightcurveWindow = new mainLightcurve(837, 345, 303, 110, "Light curve");
        mainLightcurveWindow->box(FL_GTK_UP_BOX);
        mainLightcurveWindow->color(FL_BACKGROUND_COLOR);
        mainLightcurveWindow->selection_color(FL_BACKGROUND_COLOR);
        mainLightcurveWindow->labeltype(FL_NORMAL_LABEL);
        mainLightcurveWindow->labelfont(0);
        mainLightcurveWindow->labelsize(14);
        mainLightcurveWindow->labelcolor(FL_FOREGROUND_COLOR);
        mainLightcurveWindow->align(Fl_Align(FL_ALIGN_CENTER));
        mainLightcurveWindow->when(FL_WHEN_RELEASE);
      } // mainLightcurve* mainLightcurveWindow
      { Fl_Button* o = new Fl_Button(1275, 350, 75, 25, "Flush");
        o->callback((Fl_Callback*)cb_Flush2);
      } // Fl_Button* o
      { ctsOutput = new Fl_Value_Output(1187, 350, 77, 24, "cts/s:");
        ctsOutput->step(0.1);
      } // Fl_Value_Output* ctsOutput
      { timebinsize_counter = new Fl_Counter(1150, 380, 120, 20, "bin size (s):");
        timebinsize_counter->minimum(0.1);
        timebinsize_counter->value(1);
        timebinsize_counter->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Counter* timebinsize_counter
      { lightcurvexmax_counter = new Fl_Counter(1150, 405, 120, 20, "total sec:");
        lightcurvexmax_counter->minimum(1);
        lightcurvexmax_counter->step(1);
        lightcurvexmax_counter->value(20);
        lightcurvexmax_counter->callback((Fl_Callback*)cb_lightcurvexmax_counter);
        lightcurvexmax_counter->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Counter* lightcurvexmax_counter
      { mainLightcurve_ymaxslider = new Fl_Value_Slider(785, 350, 25, 85, "max:");
        mainLightcurve_ymaxslider->maximum(5000);
        mainLightcurve_ymaxslider->step(100);
        mainLightcurve_ymaxslider->textsize(14);
        mainLightcurve_ymaxslider->callback((Fl_Callback*)cb_mainLightcurve_ymaxslider);
        mainLightcurve_ymaxslider->align(Fl_Align(290));
      } // Fl_Value_Slider* mainLightcurve_ymaxslider
      { totalctsOutput = new Fl_Value_Output(1230, 428, 115, 24, "Total Counts");
        totalctsOutput->step(1);
      } // Fl_Value_Output* totalctsOutput
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(300, 640, 465, 125, "Console");
      o->box(FL_THIN_UP_FRAME);
      { consoleBuf = new Fl_Text_Display(300, 645, 370, 120);
      } // Fl_Text_Display* consoleBuf
      { Fl_Button* o = new Fl_Button(685, 660, 65, 25, "Clear");
        o->callback((Fl_Callback*)cb_Clear);
      } // Fl_Button* o
      { printasicframe_button = new Fl_Check_Button(675, 700, 63, 15, "print frame");
        printasicframe_button->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* printasicframe_button
      o->end();
    } // Fl_Group* o
    { detector_choice = new Fl_Group(780, 301, 260, 29, "#");
      detector_choice->box(FL_DOWN_BOX);
      detector_choice->align(Fl_Align(FL_ALIGN_LEFT));
      { detector0_checkbox = new Fl_Check_Button(785, 301, 35, 29, "0");
        detector0_checkbox->down_box(FL_DOWN_BOX);
        detector0_checkbox->callback((Fl_Callback*)cb_detector0_checkbox);
      } // Fl_Check_Button* detector0_checkbox
      { detector1_checkbox = new Fl_Check_Button(815, 301, 35, 29, "1");
        detector1_checkbox->down_box(FL_DOWN_BOX);
        detector1_checkbox->callback((Fl_Callback*)cb_detector1_checkbox);
      } // Fl_Check_Button* detector1_checkbox
      { detector2_checkbox = new Fl_Check_Button(845, 301, 35, 29, "2");
        detector2_checkbox->down_box(FL_DOWN_BOX);
        detector2_checkbox->callback((Fl_Callback*)cb_detector2_checkbox);
      } // Fl_Check_Button* detector2_checkbox
      { detector3_checkbox = new Fl_Check_Button(875, 301, 35, 29, "3");
        detector3_checkbox->down_box(FL_DOWN_BOX);
        detector3_checkbox->callback((Fl_Callback*)cb_detector3_checkbox);
      } // Fl_Check_Button* detector3_checkbox
      { detector4_checkbox = new Fl_Check_Button(905, 301, 35, 29, "4");
        detector4_checkbox->down_box(FL_DOWN_BOX);
        detector4_checkbox->callback((Fl_Callback*)cb_detector4_checkbox);
      } // Fl_Check_Button* detector4_checkbox
      { detector5_checkbox = new Fl_Check_Button(935, 301, 35, 29, "5");
        detector5_checkbox->down_box(FL_DOWN_BOX);
        detector5_checkbox->callback((Fl_Callback*)cb_detector5_checkbox);
      } // Fl_Check_Button* detector5_checkbox
      { detector6_checkbox = new Fl_Check_Button(965, 301, 65, 29, "6");
        detector6_checkbox->down_box(FL_DOWN_BOX);
        detector6_checkbox->callback((Fl_Callback*)cb_detector6_checkbox);
      } // Fl_Check_Button* detector6_checkbox
      { detectorAll_checkbox = new Fl_Check_Button(995, 301, 45, 29, "All");
        detectorAll_checkbox->down_box(FL_DOWN_BOX);
        detectorAll_checkbox->value(1);
        detectorAll_checkbox->callback((Fl_Callback*)cb_detectorAll_checkbox);
      } // Fl_Check_Button* detectorAll_checkbox
      detector_choice->end();
    } // Fl_Group* detector_choice
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
  { sendParamsWindow = new Fl_Double_Window(1053, 524, "Send Parameters");
    sendParamsWindow->user_data((void*)(this));
    { sendParamsWindow_sendBut = new Fl_Button(415, 425, 70, 25, "Send");
      sendParamsWindow_sendBut->value(1);
      sendParamsWindow_sendBut->callback((Fl_Callback*)cb_sendParamsWindow_sendBut);
    } // Fl_Button* sendParamsWindow_sendBut
    { sendParamsWindow_value[0] = new Fl_Value_Input(135, 11, 40, 24, "Vfss_neg:");
      sendParamsWindow_value[0]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[0]
    { sendParamsWindow_value[1] = new Fl_Value_Input(135, 38, 40, 24, "Tp_longb:");
      sendParamsWindow_value[1]->maximum(7);
      sendParamsWindow_value[1]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[1]
    { Fl_Button* o = new Fl_Button(415, 460, 70, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { sendParamsWindow_value[2] = new Fl_Value_Input(135, 65, 40, 23, "Sbi_hp1:");
      sendParamsWindow_value[2]->maximum(7);
      sendParamsWindow_value[2]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[2]
    { sendParamsWindow_value[3] = new Fl_Value_Input(135, 92, 40, 23, "Sbi_hp2b:");
      sendParamsWindow_value[3]->maximum(7);
      sendParamsWindow_value[3]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[3]
    { sendParamsWindow_value[4] = new Fl_Value_Input(135, 118, 40, 24, "Iramp_fb:");
      sendParamsWindow_value[4]->maximum(7);
      sendParamsWindow_value[4]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[4]
    { sendParamsWindow_value[5] = new Fl_Value_Input(135, 146, 40, 24, "Iramp_f2:");
      sendParamsWindow_value[5]->maximum(7);
      sendParamsWindow_value[5]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[5]
    { sendParamsWindow_value[6] = new Fl_Value_Input(135, 173, 40, 24, "CM_thr_dis:");
      sendParamsWindow_value[6]->maximum(7);
      sendParamsWindow_value[6]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[6]
    { sendParamsWindow_value[7] = new Fl_Value_Input(135, 201, 40, 24, "RO_all:");
      sendParamsWindow_value[7]->maximum(7);
      sendParamsWindow_value[7]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[7]
    { sendParamsWindow_value[8] = new Fl_Value_Input(135, 228, 40, 24, "Ck_en:");
      sendParamsWindow_value[8]->maximum(7);
      sendParamsWindow_value[8]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[8]
    { sendParamsWindow_value[9] = new Fl_Value_Input(135, 256, 40, 24, "Prebi_hp:");
      sendParamsWindow_value[9]->maximum(7);
      sendParamsWindow_value[9]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[9]
    { sendParamsWindow_value[10] = new Fl_Value_Input(135, 284, 40, 24, "Cal_gen_on:");
      sendParamsWindow_value[10]->maximum(7);
      sendParamsWindow_value[10]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[10]
    { sendParamsWindow_value[11] = new Fl_Value_Input(135, 311, 40, 24, "Slew_on_b:");
      sendParamsWindow_value[11]->maximum(7);
      sendParamsWindow_value[11]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[11]
    { sendParamsWindow_value[12] = new Fl_Value_Input(135, 338, 40, 24, "Nside:");
      sendParamsWindow_value[12]->maximum(7);
      sendParamsWindow_value[12]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[12]
    { sendParamsWindow_value[13] = new Fl_Value_Input(135, 365, 40, 24, "CC_on:");
      sendParamsWindow_value[13]->maximum(7);
      sendParamsWindow_value[13]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[13]
    { sendParamsWindow_value[14] = new Fl_Value_Input(135, 392, 40, 24, "Test_on:");
      sendParamsWindow_value[14]->maximum(7);
      sendParamsWindow_value[14]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[14]
    { sendParamsWindow_value[15] = new Fl_Value_Input(135, 420, 40, 24, "Low_gain:");
      sendParamsWindow_value[15]->maximum(7);
      sendParamsWindow_value[15]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[15]
    { sendParamsWindow_value[16] = new Fl_Value_Input(290, 13, 40, 24, "negQ:");
      sendParamsWindow_value[16]->maximum(7);
      sendParamsWindow_value[16]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[16]
    { sendParamsWindow_value[17] = new Fl_Value_Input(290, 40, 40, 24, "Reserved");
      sendParamsWindow_value[17]->maximum(7);
      sendParamsWindow_value[17]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[17]
    { sendParamsWindow_value[18] = new Fl_Value_Input(290, 67, 40, 24, "ADC_on_b:");
      sendParamsWindow_value[18]->maximum(7);
      sendParamsWindow_value[18]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[18]
    { sendParamsWindow_value[19] = new Fl_Value_Input(290, 95, 40, 24, "VA_RO:");
      sendParamsWindow_value[19]->maximum(7);
      sendParamsWindow_value[19]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[19]
    { sendParamsWindow_value[20] = new Fl_Value_Input(290, 120, 40, 24, "Vrc_negQ:");
      sendParamsWindow_value[20]->maximum(7);
      sendParamsWindow_value[20]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[20]
    { sendParamsWindow_value[21] = new Fl_Value_Input(290, 147, 40, 24, "Ileak_offset:");
      sendParamsWindow_value[21]->maximum(7);
      sendParamsWindow_value[21]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[21]
    { sendParamsWindow_value[22] = new Fl_Value_Input(290, 174, 40, 24, "ADC_test1:");
      sendParamsWindow_value[22]->maximum(7);
      sendParamsWindow_value[22]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[22]
    { sendParamsWindow_value[23] = new Fl_Value_Input(290, 201, 40, 24, "ADC_test2:");
      sendParamsWindow_value[23]->maximum(7);
      sendParamsWindow_value[23]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[23]
    { sendParamsWindow_value[24] = new Fl_Value_Input(290, 229, 40, 24, "Delay, dummy:");
      sendParamsWindow_value[24]->maximum(63);
      sendParamsWindow_value[24]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[24]
    { sendParamsWindow_value[25] = new Fl_Value_Input(290, 257, 40, 24, "Digital threshold:");
      sendParamsWindow_value[25]->maximum(255);
      sendParamsWindow_value[25]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[25]
    { sendParamsWindow_value[26] = new Fl_Value_Input(290, 284, 40, 24, "Shabi_lg:");
      sendParamsWindow_value[26]->maximum(7);
      sendParamsWindow_value[26]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[26]
    { sendParamsWindow_value[27] = new Fl_Value_Input(290, 311, 40, 24, "Pos_Il_1:");
      sendParamsWindow_value[27]->maximum(7);
      sendParamsWindow_value[27]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[27]
    { sendParamsWindow_value[28] = new Fl_Value_Input(290, 338, 40, 24, "Pos_Il_2:");
      sendParamsWindow_value[28]->maximum(7);
      sendParamsWindow_value[28]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[28]
    { sendParamsWindow_value[29] = new Fl_Value_Input(290, 366, 40, 24, "Bias DAC, vthr:");
      sendParamsWindow_value[29]->maximum(31);
      sendParamsWindow_value[29]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[29]
    { sendParamsWindow_value[30] = new Fl_Value_Input(290, 394, 40, 24, "Bias DAC, ifp:");
      sendParamsWindow_value[30]->maximum(31);
      sendParamsWindow_value[30]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[30]
    { sendParamsWindow_value[31] = new Fl_Value_Input(290, 421, 40, 24, "Bias DAC, Iramp:");
      sendParamsWindow_value[31]->maximum(31);
      sendParamsWindow_value[31]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[31]
    { sendParamsWindow_value[32] = new Fl_Value_Input(480, 14, 40, 24, "Bias DAC, ck_bi:");
      sendParamsWindow_value[32]->maximum(31);
      sendParamsWindow_value[32]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[32]
    { sendParamsWindow_value[33] = new Fl_Value_Input(480, 41, 40, 24, "Bias DAC, cal_bi:");
      sendParamsWindow_value[33]->maximum(31);
      sendParamsWindow_value[33]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[33]
    { sendParamsWindow_value[34] = new Fl_Value_Input(480, 68, 40, 24, "Bias DAC, twbi:");
      sendParamsWindow_value[34]->maximum(31);
      sendParamsWindow_value[34]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[34]
    { sendParamsWindow_value[35] = new Fl_Value_Input(480, 96, 40, 24, "Bias DAC, sha_bias:");
      sendParamsWindow_value[35]->maximum(31);
      sendParamsWindow_value[35]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[35]
    { sendParamsWindow_value[36] = new Fl_Value_Input(480, 123, 40, 24, "Bias DAC, ifss:");
      sendParamsWindow_value[36]->maximum(31);
      sendParamsWindow_value[36]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[36]
    { sendParamsWindow_value[37] = new Fl_Value_Input(480, 150, 40, 24, "Bias DAC, ifsf:");
      sendParamsWindow_value[37]->maximum(31);
      sendParamsWindow_value[37]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[37]
    { sendParamsWindow_value[38] = new Fl_Value_Input(480, 177, 40, 24, "Bias DAC, vrc:");
      sendParamsWindow_value[38]->maximum(31);
      sendParamsWindow_value[38]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[38]
    { sendParamsWindow_value[39] = new Fl_Value_Input(480, 205, 40, 24, "Bias DAC, sbi:");
      sendParamsWindow_value[39]->maximum(31);
      sendParamsWindow_value[39]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[39]
    { sendParamsWindow_value[40] = new Fl_Value_Input(480, 232, 40, 24, "Bias DAC, pre_bias:");
      sendParamsWindow_value[40]->maximum(31);
      sendParamsWindow_value[40]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[40]
    { sendParamsWindow_value[41] = new Fl_Value_Input(480, 260, 40, 24, "Bias DAC, ibuf:");
      sendParamsWindow_value[41]->maximum(31);
      sendParamsWindow_value[41]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[41]
    { sendParamsWindow_value[42] = new Fl_Value_Input(480, 287, 40, 24, "Bias DAC, obi:");
      sendParamsWindow_value[42]->maximum(31);
      sendParamsWindow_value[42]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[42]
    { sendParamsWindow_value[43] = new Fl_Value_Input(480, 314, 40, 24, "Bias DAC, Ioffset:");
      sendParamsWindow_value[43]->maximum(31);
      sendParamsWindow_value[43]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[43]
    { sendParamsWindow_value[44] = new Fl_Value_Input(480, 341, 40, 24, "Bias DAC, disc3_bi:");
      sendParamsWindow_value[44]->maximum(31);
      sendParamsWindow_value[44]->step(1);
    } // Fl_Value_Input* sendParamsWindow_value[44]
    { sendParamsWindow_chan[0] = new Fl_Light_Button(555, 35, 67, 20, "0");
    } // Fl_Light_Button* sendParamsWindow_chan[0]
    { sendParamsWindow_chan[1] = new Fl_Light_Button(555, 55, 67, 20, "1");
    } // Fl_Light_Button* sendParamsWindow_chan[1]
    { sendParamsWindow_chan[2] = new Fl_Light_Button(555, 75, 67, 20, "2");
    } // Fl_Light_Button* sendParamsWindow_chan[2]
    { sendParamsWindow_chan[3] = new Fl_Light_Button(555, 95, 67, 20, "3");
    } // Fl_Light_Button* sendParamsWindow_chan[3]
    { sendParamsWindow_chan[4] = new Fl_Light_Button(555, 115, 67, 20, "4");
    } // Fl_Light_Button* sendParamsWindow_chan[4]
    { sendParamsWindow_chan[5] = new Fl_Light_Button(555, 135, 67, 20, "5");
    } // Fl_Light_Button* sendParamsWindow_chan[5]
    { sendParamsWindow_chan[6] = new Fl_Light_Button(555, 155, 67, 20, "6");
    } // Fl_Light_Button* sendParamsWindow_chan[6]
    { sendParamsWindow_chan[7] = new Fl_Light_Button(555, 175, 67, 20, "7");
    } // Fl_Light_Button* sendParamsWindow_chan[7]
    { sendParamsWindow_chan[8] = new Fl_Light_Button(555, 195, 67, 20, "8");
    } // Fl_Light_Button* sendParamsWindow_chan[8]
    { sendParamsWindow_chan[9] = new Fl_Light_Button(555, 215, 67, 20, "9");
    } // Fl_Light_Button* sendParamsWindow_chan[9]
    { sendParamsWindow_chan[10] = new Fl_Light_Button(555, 235, 67, 20, "10");
    } // Fl_Light_Button* sendParamsWindow_chan[10]
    { sendParamsWindow_chan[11] = new Fl_Light_Button(555, 255, 67, 20, "11");
    } // Fl_Light_Button* sendParamsWindow_chan[11]
    { sendParamsWindow_chan[12] = new Fl_Light_Button(555, 275, 67, 20, "12");
    } // Fl_Light_Button* sendParamsWindow_chan[12]
    { sendParamsWindow_chan[13] = new Fl_Light_Button(555, 295, 67, 20, "13");
    } // Fl_Light_Button* sendParamsWindow_chan[13]
    { sendParamsWindow_chan[14] = new Fl_Light_Button(555, 315, 67, 20, "14");
    } // Fl_Light_Button* sendParamsWindow_chan[14]
    { sendParamsWindow_chan[15] = new Fl_Light_Button(555, 335, 67, 20, "15");
    } // Fl_Light_Button* sendParamsWindow_chan[15]
    { sendParamsWindow_chan[16] = new Fl_Light_Button(555, 355, 67, 20, "16");
    } // Fl_Light_Button* sendParamsWindow_chan[16]
    { sendParamsWindow_chan[17] = new Fl_Light_Button(555, 375, 67, 20, "17");
    } // Fl_Light_Button* sendParamsWindow_chan[17]
    { sendParamsWindow_chan[18] = new Fl_Light_Button(555, 395, 67, 20, "18");
    } // Fl_Light_Button* sendParamsWindow_chan[18]
    { sendParamsWindow_chan[19] = new Fl_Light_Button(555, 415, 67, 20, "19");
    } // Fl_Light_Button* sendParamsWindow_chan[19]
    { sendParamsWindow_chan[20] = new Fl_Light_Button(555, 435, 67, 20, "20");
    } // Fl_Light_Button* sendParamsWindow_chan[20]
    { sendParamsWindow_chan[21] = new Fl_Light_Button(620, 35, 67, 20, "21");
    } // Fl_Light_Button* sendParamsWindow_chan[21]
    { sendParamsWindow_chan[22] = new Fl_Light_Button(620, 55, 67, 20, "22");
    } // Fl_Light_Button* sendParamsWindow_chan[22]
    { sendParamsWindow_chan[23] = new Fl_Light_Button(620, 75, 67, 20, "23");
    } // Fl_Light_Button* sendParamsWindow_chan[23]
    { sendParamsWindow_chan[24] = new Fl_Light_Button(620, 95, 67, 20, "24");
    } // Fl_Light_Button* sendParamsWindow_chan[24]
    { sendParamsWindow_chan[25] = new Fl_Light_Button(620, 115, 67, 20, "25");
    } // Fl_Light_Button* sendParamsWindow_chan[25]
    { sendParamsWindow_chan[26] = new Fl_Light_Button(620, 135, 67, 20, "26");
    } // Fl_Light_Button* sendParamsWindow_chan[26]
    { sendParamsWindow_chan[27] = new Fl_Light_Button(620, 155, 67, 20, "27");
    } // Fl_Light_Button* sendParamsWindow_chan[27]
    { sendParamsWindow_chan[28] = new Fl_Light_Button(620, 175, 67, 20, "28");
    } // Fl_Light_Button* sendParamsWindow_chan[28]
    { sendParamsWindow_chan[29] = new Fl_Light_Button(620, 195, 67, 20, "29");
    } // Fl_Light_Button* sendParamsWindow_chan[29]
    { sendParamsWindow_chan[30] = new Fl_Light_Button(620, 215, 67, 20, "30");
    } // Fl_Light_Button* sendParamsWindow_chan[30]
    { sendParamsWindow_chan[31] = new Fl_Light_Button(620, 235, 67, 20, "31");
    } // Fl_Light_Button* sendParamsWindow_chan[31]
    { sendParamsWindow_chan[32] = new Fl_Light_Button(620, 255, 67, 20, "32");
    } // Fl_Light_Button* sendParamsWindow_chan[32]
    { sendParamsWindow_chan[33] = new Fl_Light_Button(620, 275, 67, 20, "33");
    } // Fl_Light_Button* sendParamsWindow_chan[33]
    { sendParamsWindow_chan[34] = new Fl_Light_Button(620, 295, 67, 20, "34");
    } // Fl_Light_Button* sendParamsWindow_chan[34]
    { sendParamsWindow_chan[35] = new Fl_Light_Button(620, 315, 67, 20, "35");
    } // Fl_Light_Button* sendParamsWindow_chan[35]
    { sendParamsWindow_chan[36] = new Fl_Light_Button(620, 335, 67, 20, "36");
    } // Fl_Light_Button* sendParamsWindow_chan[36]
    { sendParamsWindow_chan[37] = new Fl_Light_Button(620, 355, 67, 20, "37");
    } // Fl_Light_Button* sendParamsWindow_chan[37]
    { sendParamsWindow_chan[38] = new Fl_Light_Button(620, 375, 67, 20, "38");
    } // Fl_Light_Button* sendParamsWindow_chan[38]
    { sendParamsWindow_chan[39] = new Fl_Light_Button(620, 395, 67, 20, "39");
    } // Fl_Light_Button* sendParamsWindow_chan[39]
    { sendParamsWindow_chan[40] = new Fl_Light_Button(620, 415, 67, 20, "40");
    } // Fl_Light_Button* sendParamsWindow_chan[40]
    { sendParamsWindow_chan[41] = new Fl_Light_Button(620, 435, 67, 20, "41");
    } // Fl_Light_Button* sendParamsWindow_chan[41]
    { sendParamsWindow_chan[42] = new Fl_Light_Button(685, 35, 67, 20, "42");
    } // Fl_Light_Button* sendParamsWindow_chan[42]
    { sendParamsWindow_chan[43] = new Fl_Light_Button(685, 55, 67, 20, "43");
    } // Fl_Light_Button* sendParamsWindow_chan[43]
    { sendParamsWindow_chan[44] = new Fl_Light_Button(685, 75, 67, 20, "44");
    } // Fl_Light_Button* sendParamsWindow_chan[44]
    { sendParamsWindow_chan[45] = new Fl_Light_Button(685, 95, 67, 20, "45");
    } // Fl_Light_Button* sendParamsWindow_chan[45]
    { sendParamsWindow_chan[46] = new Fl_Light_Button(685, 115, 67, 20, "46");
    } // Fl_Light_Button* sendParamsWindow_chan[46]
    { sendParamsWindow_chan[47] = new Fl_Light_Button(685, 135, 67, 20, "47");
    } // Fl_Light_Button* sendParamsWindow_chan[47]
    { sendParamsWindow_chan[48] = new Fl_Light_Button(685, 155, 67, 20, "48");
    } // Fl_Light_Button* sendParamsWindow_chan[48]
    { sendParamsWindow_chan[49] = new Fl_Light_Button(685, 175, 67, 20, "49");
    } // Fl_Light_Button* sendParamsWindow_chan[49]
    { sendParamsWindow_chan[50] = new Fl_Light_Button(685, 195, 67, 20, "50");
    } // Fl_Light_Button* sendParamsWindow_chan[50]
    { sendParamsWindow_chan[51] = new Fl_Light_Button(685, 215, 67, 20, "51");
    } // Fl_Light_Button* sendParamsWindow_chan[51]
    { sendParamsWindow_chan[52] = new Fl_Light_Button(685, 235, 67, 20, "52");
    } // Fl_Light_Button* sendParamsWindow_chan[52]
    { sendParamsWindow_chan[53] = new Fl_Light_Button(685, 255, 67, 20, "53");
    } // Fl_Light_Button* sendParamsWindow_chan[53]
    { sendParamsWindow_chan[54] = new Fl_Light_Button(685, 275, 67, 20, "54");
    } // Fl_Light_Button* sendParamsWindow_chan[54]
    { sendParamsWindow_chan[55] = new Fl_Light_Button(685, 295, 67, 20, "55");
    } // Fl_Light_Button* sendParamsWindow_chan[55]
    { sendParamsWindow_chan[56] = new Fl_Light_Button(685, 315, 67, 20, "56");
    } // Fl_Light_Button* sendParamsWindow_chan[56]
    { sendParamsWindow_chan[57] = new Fl_Light_Button(685, 335, 67, 20, "57");
    } // Fl_Light_Button* sendParamsWindow_chan[57]
    { sendParamsWindow_chan[58] = new Fl_Light_Button(685, 355, 67, 20, "58");
    } // Fl_Light_Button* sendParamsWindow_chan[58]
    { sendParamsWindow_chan[59] = new Fl_Light_Button(685, 375, 67, 20, "59");
    } // Fl_Light_Button* sendParamsWindow_chan[59]
    { sendParamsWindow_chan[60] = new Fl_Light_Button(685, 395, 67, 20, "60");
    } // Fl_Light_Button* sendParamsWindow_chan[60]
    { sendParamsWindow_chan[61] = new Fl_Light_Button(685, 415, 67, 20, "61");
    } // Fl_Light_Button* sendParamsWindow_chan[61]
    { sendParamsWindow_chan[62] = new Fl_Light_Button(685, 435, 67, 20, "62");
    } // Fl_Light_Button* sendParamsWindow_chan[62]
    { sendParamsWindow_chan[63] = new Fl_Light_Button(685, 455, 67, 20, "63");
    } // Fl_Light_Button* sendParamsWindow_chan[63]
    { sendParamsWindow_asic = new Fl_Value_Input(460, 386, 15, 24, "ASIC");
      sendParamsWindow_asic->maximum(3);
      sendParamsWindow_asic->step(1);
      sendParamsWindow_asic->callback((Fl_Callback*)cb_sendParamsWindow_asic);
    } // Fl_Value_Input* sendParamsWindow_asic
    { Fl_Button* o = new Fl_Button(555, 455, 63, 20, "set all");
      o->callback((Fl_Callback*)cb_set);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(619, 455, 63, 20, "clear all");
      o->callback((Fl_Callback*)cb_clear);
    } // Fl_Button* o
    { Fl_Text_Display* o = new Fl_Text_Display(705, 5, 15, 20, "Channel disable");
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Text_Display* o
    { sendParamsWindow_test[0] = new Fl_Light_Button(790, 36, 67, 20, "0");
    } // Fl_Light_Button* sendParamsWindow_test[0]
    { sendParamsWindow_test[1] = new Fl_Light_Button(790, 56, 67, 20, "1");
    } // Fl_Light_Button* sendParamsWindow_test[1]
    { sendParamsWindow_test[2] = new Fl_Light_Button(790, 76, 67, 20, "2");
    } // Fl_Light_Button* sendParamsWindow_test[2]
    { sendParamsWindow_test[3] = new Fl_Light_Button(790, 96, 67, 20, "3");
    } // Fl_Light_Button* sendParamsWindow_test[3]
    { sendParamsWindow_test[4] = new Fl_Light_Button(790, 116, 67, 20, "4");
    } // Fl_Light_Button* sendParamsWindow_test[4]
    { sendParamsWindow_test[5] = new Fl_Light_Button(790, 136, 67, 20, "5");
    } // Fl_Light_Button* sendParamsWindow_test[5]
    { sendParamsWindow_test[6] = new Fl_Light_Button(790, 156, 67, 20, "6");
    } // Fl_Light_Button* sendParamsWindow_test[6]
    { sendParamsWindow_test[7] = new Fl_Light_Button(790, 176, 67, 20, "7");
    } // Fl_Light_Button* sendParamsWindow_test[7]
    { sendParamsWindow_test[8] = new Fl_Light_Button(790, 196, 67, 20, "8");
    } // Fl_Light_Button* sendParamsWindow_test[8]
    { sendParamsWindow_test[9] = new Fl_Light_Button(790, 216, 67, 20, "9");
    } // Fl_Light_Button* sendParamsWindow_test[9]
    { sendParamsWindow_test[10] = new Fl_Light_Button(790, 236, 67, 20, "10");
    } // Fl_Light_Button* sendParamsWindow_test[10]
    { sendParamsWindow_test[11] = new Fl_Light_Button(790, 256, 67, 20, "11");
    } // Fl_Light_Button* sendParamsWindow_test[11]
    { sendParamsWindow_test[12] = new Fl_Light_Button(790, 276, 67, 20, "12");
    } // Fl_Light_Button* sendParamsWindow_test[12]
    { sendParamsWindow_test[13] = new Fl_Light_Button(790, 296, 67, 20, "13");
    } // Fl_Light_Button* sendParamsWindow_test[13]
    { sendParamsWindow_test[14] = new Fl_Light_Button(790, 316, 67, 20, "14");
    } // Fl_Light_Button* sendParamsWindow_test[14]
    { sendParamsWindow_test[15] = new Fl_Light_Button(790, 336, 67, 20, "15");
    } // Fl_Light_Button* sendParamsWindow_test[15]
    { sendParamsWindow_test[16] = new Fl_Light_Button(790, 356, 67, 20, "16");
    } // Fl_Light_Button* sendParamsWindow_test[16]
    { sendParamsWindow_test[17] = new Fl_Light_Button(790, 376, 67, 20, "17");
    } // Fl_Light_Button* sendParamsWindow_test[17]
    { sendParamsWindow_test[18] = new Fl_Light_Button(790, 396, 67, 20, "18");
    } // Fl_Light_Button* sendParamsWindow_test[18]
    { sendParamsWindow_test[19] = new Fl_Light_Button(790, 416, 67, 20, "19");
    } // Fl_Light_Button* sendParamsWindow_test[19]
    { sendParamsWindow_test[20] = new Fl_Light_Button(790, 436, 67, 20, "20");
    } // Fl_Light_Button* sendParamsWindow_test[20]
    { sendParamsWindow_test[21] = new Fl_Light_Button(855, 36, 67, 20, "21");
    } // Fl_Light_Button* sendParamsWindow_test[21]
    { sendParamsWindow_test[22] = new Fl_Light_Button(855, 56, 67, 20, "22");
    } // Fl_Light_Button* sendParamsWindow_test[22]
    { sendParamsWindow_test[23] = new Fl_Light_Button(855, 76, 67, 20, "23");
    } // Fl_Light_Button* sendParamsWindow_test[23]
    { sendParamsWindow_test[24] = new Fl_Light_Button(855, 96, 67, 20, "24");
    } // Fl_Light_Button* sendParamsWindow_test[24]
    { sendParamsWindow_test[25] = new Fl_Light_Button(855, 116, 67, 20, "25");
    } // Fl_Light_Button* sendParamsWindow_test[25]
    { sendParamsWindow_test[26] = new Fl_Light_Button(855, 136, 67, 20, "26");
    } // Fl_Light_Button* sendParamsWindow_test[26]
    { sendParamsWindow_test[27] = new Fl_Light_Button(855, 156, 67, 20, "27");
    } // Fl_Light_Button* sendParamsWindow_test[27]
    { sendParamsWindow_test[28] = new Fl_Light_Button(855, 176, 67, 20, "28");
    } // Fl_Light_Button* sendParamsWindow_test[28]
    { sendParamsWindow_test[29] = new Fl_Light_Button(855, 196, 67, 20, "29");
    } // Fl_Light_Button* sendParamsWindow_test[29]
    { sendParamsWindow_test[30] = new Fl_Light_Button(855, 216, 67, 20, "30");
    } // Fl_Light_Button* sendParamsWindow_test[30]
    { sendParamsWindow_test[31] = new Fl_Light_Button(855, 236, 67, 20, "31");
    } // Fl_Light_Button* sendParamsWindow_test[31]
    { sendParamsWindow_test[32] = new Fl_Light_Button(855, 256, 67, 20, "32");
    } // Fl_Light_Button* sendParamsWindow_test[32]
    { sendParamsWindow_test[33] = new Fl_Light_Button(855, 276, 67, 20, "33");
    } // Fl_Light_Button* sendParamsWindow_test[33]
    { sendParamsWindow_test[34] = new Fl_Light_Button(855, 296, 67, 20, "34");
    } // Fl_Light_Button* sendParamsWindow_test[34]
    { sendParamsWindow_test[35] = new Fl_Light_Button(855, 316, 67, 20, "35");
    } // Fl_Light_Button* sendParamsWindow_test[35]
    { sendParamsWindow_test[36] = new Fl_Light_Button(855, 336, 67, 20, "36");
    } // Fl_Light_Button* sendParamsWindow_test[36]
    { sendParamsWindow_test[37] = new Fl_Light_Button(855, 356, 67, 20, "37");
    } // Fl_Light_Button* sendParamsWindow_test[37]
    { sendParamsWindow_test[38] = new Fl_Light_Button(855, 376, 67, 20, "38");
    } // Fl_Light_Button* sendParamsWindow_test[38]
    { sendParamsWindow_test[39] = new Fl_Light_Button(855, 396, 67, 20, "39");
    } // Fl_Light_Button* sendParamsWindow_test[39]
    { sendParamsWindow_test[40] = new Fl_Light_Button(855, 416, 67, 20, "40");
    } // Fl_Light_Button* sendParamsWindow_test[40]
    { sendParamsWindow_test[41] = new Fl_Light_Button(855, 436, 67, 20, "41");
    } // Fl_Light_Button* sendParamsWindow_test[41]
    { sendParamsWindow_test[42] = new Fl_Light_Button(920, 36, 67, 20, "42");
    } // Fl_Light_Button* sendParamsWindow_test[42]
    { sendParamsWindow_test[43] = new Fl_Light_Button(920, 56, 67, 20, "43");
    } // Fl_Light_Button* sendParamsWindow_test[43]
    { sendParamsWindow_test[44] = new Fl_Light_Button(920, 76, 67, 20, "44");
    } // Fl_Light_Button* sendParamsWindow_test[44]
    { sendParamsWindow_test[45] = new Fl_Light_Button(920, 96, 67, 20, "45");
    } // Fl_Light_Button* sendParamsWindow_test[45]
    { sendParamsWindow_test[46] = new Fl_Light_Button(920, 116, 67, 20, "46");
    } // Fl_Light_Button* sendParamsWindow_test[46]
    { sendParamsWindow_test[47] = new Fl_Light_Button(920, 136, 67, 20, "47");
    } // Fl_Light_Button* sendParamsWindow_test[47]
    { sendParamsWindow_test[48] = new Fl_Light_Button(920, 156, 67, 20, "48");
    } // Fl_Light_Button* sendParamsWindow_test[48]
    { sendParamsWindow_test[49] = new Fl_Light_Button(920, 176, 67, 20, "49");
    } // Fl_Light_Button* sendParamsWindow_test[49]
    { sendParamsWindow_test[50] = new Fl_Light_Button(920, 196, 67, 20, "50");
    } // Fl_Light_Button* sendParamsWindow_test[50]
    { sendParamsWindow_test[51] = new Fl_Light_Button(920, 216, 67, 20, "51");
    } // Fl_Light_Button* sendParamsWindow_test[51]
    { sendParamsWindow_test[52] = new Fl_Light_Button(920, 236, 67, 20, "52");
    } // Fl_Light_Button* sendParamsWindow_test[52]
    { sendParamsWindow_test[53] = new Fl_Light_Button(920, 256, 67, 20, "53");
    } // Fl_Light_Button* sendParamsWindow_test[53]
    { sendParamsWindow_test[54] = new Fl_Light_Button(920, 276, 67, 20, "54");
    } // Fl_Light_Button* sendParamsWindow_test[54]
    { sendParamsWindow_test[55] = new Fl_Light_Button(920, 296, 67, 20, "55");
    } // Fl_Light_Button* sendParamsWindow_test[55]
    { sendParamsWindow_test[56] = new Fl_Light_Button(920, 316, 67, 20, "56");
    } // Fl_Light_Button* sendParamsWindow_test[56]
    { sendParamsWindow_test[57] = new Fl_Light_Button(920, 336, 67, 20, "57");
    } // Fl_Light_Button* sendParamsWindow_test[57]
    { sendParamsWindow_test[58] = new Fl_Light_Button(920, 356, 67, 20, "58");
    } // Fl_Light_Button* sendParamsWindow_test[58]
    { sendParamsWindow_test[59] = new Fl_Light_Button(920, 376, 67, 20, "59");
    } // Fl_Light_Button* sendParamsWindow_test[59]
    { sendParamsWindow_test[60] = new Fl_Light_Button(920, 396, 67, 20, "60");
    } // Fl_Light_Button* sendParamsWindow_test[60]
    { sendParamsWindow_test[61] = new Fl_Light_Button(920, 416, 67, 20, "61");
    } // Fl_Light_Button* sendParamsWindow_test[61]
    { sendParamsWindow_test[62] = new Fl_Light_Button(920, 436, 67, 20, "62");
    } // Fl_Light_Button* sendParamsWindow_test[62]
    { sendParamsWindow_test[63] = new Fl_Light_Button(920, 456, 67, 20, "63");
    } // Fl_Light_Button* sendParamsWindow_test[63]
    { Fl_Button* o = new Fl_Button(790, 456, 63, 20, "set all");
      o->callback((Fl_Callback*)cb_set1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(854, 456, 63, 20, "clear all");
      o->callback((Fl_Callback*)cb_clear1);
    } // Fl_Button* o
    { Fl_Text_Display* o = new Fl_Text_Display(940, 6, 15, 20, "Test enable");
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Text_Display* o
    sendParamsWindow->end();
  } // Fl_Double_Window* sendParamsWindow
  { setHoldTimeWindow = new Fl_Double_Window(312, 165, "Set hold time and take data");
    setHoldTimeWindow->user_data((void*)(this));
    { setHoldTimeWindow_holdTime = new Fl_Value_Input(235, 15, 25, 25, "Hold time setting (all ASICs)::");
    } // Fl_Value_Input* setHoldTimeWindow_holdTime
    { setHoldTimeWindow_setBut = new Fl_Button(70, 65, 80, 25, "Set");
      setHoldTimeWindow_setBut->callback((Fl_Callback*)cb_setHoldTimeWindow_setBut);
    } // Fl_Button* setHoldTimeWindow_setBut
    { Fl_Button* o = new Fl_Button(125, 115, 80, 25, "Close");
      o->callback((Fl_Callback*)cb_Close1);
      o->deactivate();
    } // Fl_Button* o
    setHoldTimeWindow->end();
  } // Fl_Double_Window* setHoldTimeWindow
  { setTrigWindow = new Fl_Double_Window(357, 203, "Trigger Options");
    setTrigWindow->user_data((void*)(this));
    { setTrigWindow_delayTime = new Fl_Value_Input(210, 16, 25, 24, "Trigger delay (units of 3.2 us)");
      setTrigWindow_delayTime->value(3);
    } // Fl_Value_Input* setTrigWindow_delayTime
    { setTrigWindow_timeoutTime = new Fl_Value_Input(211, 106, 25, 24, "Trigger timeout (units of 3.2 us)");
      setTrigWindow_timeoutTime->value(31);
      setTrigWindow_timeoutTime->deactivate();
    } // Fl_Value_Input* setTrigWindow_timeoutTime
    { Fl_Button* o = new Fl_Button(125, 155, 80, 25, "Close");
      o->callback((Fl_Callback*)cb_Close2);
      o->deactivate();
    } // Fl_Button* o
    { setTrigWindow_setDelay = new Fl_Button(255, 15, 80, 25, "Set");
      setTrigWindow_setDelay->callback((Fl_Callback*)cb_setTrigWindow_setDelay);
    } // Fl_Button* setTrigWindow_setDelay
    { setTrigWindow_setTimeout = new Fl_Button(255, 105, 80, 25, "Set");
      setTrigWindow_setTimeout->callback((Fl_Callback*)cb_setTrigWindow_setTimeout);
      setTrigWindow_setTimeout->deactivate();
    } // Fl_Button* setTrigWindow_setTimeout
    { setTrigWindow_useTimeout = new Fl_Value_Input(211, 63, 25, 21, "Use timeout");
      setTrigWindow_useTimeout->value(1);
      setTrigWindow_useTimeout->callback((Fl_Callback*)cb_setTrigWindow_useTimeout);
    } // Fl_Value_Input* setTrigWindow_useTimeout
    { setTrigWindow_setTrigMode = new Fl_Button(255, 60, 80, 25, "Set");
      setTrigWindow_setTrigMode->callback((Fl_Callback*)cb_setTrigWindow_setTrigMode);
    } // Fl_Button* setTrigWindow_setTrigMode
    setTrigWindow->end();
  } // Fl_Double_Window* setTrigWindow
  { sendCommandsWindow = new Fl_Double_Window(364, 175, "Send Commands");
    sendCommandsWindow->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(265, 10, 70, 25, "Send");
      o->value(1);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Send);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 130, 70, 25, "Close");
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 70, 70, 25, "Send");
      o->value(1);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Send1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(70, 100, 180, 25, "Strobe Attenuator State 0");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Strobe);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(70, 130, 180, 25, "Strobe Attenuator State 1");
      o->box(FL_THIN_UP_BOX);
      o->labelcolor((Fl_Color)1);
      o->callback((Fl_Callback*)cb_Strobe1);
    } // Fl_Button* o
    { highVoltage_input = new Fl_Value_Input(175, 11, 75, 24, "HV Set:");
    } // Fl_Value_Input* highVoltage_input
    { clockLow_input = new Fl_Value_Input(175, 40, 75, 24, "Clock Set Low:");
    } // Fl_Value_Input* clockLow_input
    { clockHigh_input = new Fl_Value_Input(175, 70, 75, 24, "Clock Set High:");
    } // Fl_Value_Input* clockHigh_input
    sendCommandsWindow->end();
  } // Fl_Double_Window* sendCommandsWindow
  { AboutWindow = new Fl_Double_Window(361, 109, "About");
    AboutWindow->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(140, 9, 80, 16, "FOXSI Ground Station Software");
      o->labelfont(1);
      o->labelsize(18);
    } // Fl_Box* o
    { new Fl_Box(140, 31, 80, 16, "Written by");
    } // Fl_Box* o
    { new Fl_Box(140, 51, 80, 16, "Steven Christe, Lindsay Glesener, Stephen McBride");
    } // Fl_Box* o
    { new Fl_Box(140, 71, 80, 16, "Last Updated: 2012-Oct-29");
    } // Fl_Box* o
    AboutWindow->end();
  } // Fl_Double_Window* AboutWindow
  { PreferenceWindow = new Fl_Double_Window(434, 219, "Preferences");
    PreferenceWindow->user_data((void*)(this));
    { pixelhalflife_value = new Fl_Value_Input(345, 46, 70, 24, "pixel half life (s)");
      pixelhalflife_value->value(5);
    } // Fl_Value_Input* pixelhalflife_value
    { fileTypeChoice = new Fl_Choice(70, 45, 75, 25, "File type:");
      fileTypeChoice->down_box(FL_BORDER_BOX);
      fileTypeChoice->menu(menu_fileTypeChoice);
    } // Fl_Choice* fileTypeChoice
    { Fl_Button* o = new Fl_Button(285, 185, 63, 20, "OK");
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(355, 185, 63, 20, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(340, 15, 75, 25, "Change");
      o->callback((Fl_Callback*)cb_Change);
    } // Fl_Button* o
    { datafilesavedir_fileInput = new Fl_File_Input(70, 6, 260, 34, "save dir:");
    } // Fl_File_Input* datafilesavedir_fileInput
    { readdelay_value = new Fl_Value_Input(345, 71, 70, 24, "read delay (us)");
      readdelay_value->value(10000);
    } // Fl_Value_Input* readdelay_value
    { DataSource_choice = new Fl_Choice(95, 80, 135, 25, "Data Source:");
      DataSource_choice->down_box(FL_BORDER_BOX);
      DataSource_choice->menu(menu_DataSource_choice);
    } // Fl_Choice* DataSource_choice
    { newControlRegisters_check = new Fl_Check_Button(25, 115, 63, 20, "new FPGA control registers");
      newControlRegisters_check->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* newControlRegisters_check
    { Fl_Button* o = new Fl_Button(345, 150, 75, 25, "Change");
      o->callback((Fl_Callback*)cb_Change1);
    } // Fl_Button* o
    { gsesyncfile_fileInput = new Fl_File_Input(75, 141, 260, 34, "gsesync:");
    } // Fl_File_Input* gsesyncfile_fileInput
    PreferenceWindow->end();
  } // Fl_Double_Window* PreferenceWindow
  app=new Application();
  data=new Foxsidata();
  usb=new USB_d2xx();
  buff=new Fl_Text_Buffer();
  consoleBuf->buffer(buff);
  prefs=new Fl_Preferences(Fl_Preferences::USER, "sdc", "FOXSI GSE");
  // initialization
  timebinsize_counter->step(0.1, 1);
  lightcurvexmax_counter->step(5, 10);
  histogramxmax_counter->step(5, 50);
  histogrambinsize_counter->step(1,5);
}

void Gui::show() {
  mainWindow->show();
  mainHistogramWindow->show();
  mainImageWindow->show();
  mainLightcurveWindow->show();
  detectorsImageWindow->show();
  detectorsHistogramWindow->show();
}
